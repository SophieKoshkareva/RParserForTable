.Object@value["SecondDiabetesType"] <- list(0)
.Object@column_index <- 5
return(.Object)
}
)
setGeneric(name = "FindErrors",
def = function(theObject)
{
standardGeneric("FindErrors")
}
)
setMethod(f = "FindErrors",
signature = "Diabetes",
definition = function(theObject)
{
#FindMisprints(file@table_in, theObject@column_index, theObject@key, theObject@value)
FindMisprints(misprint, file@table_in, theObject@column_index, theObject@key, theObject@value)
}
)
FindErrors(diabetes)
age <- new("Age")
FindErrors(age)
Age <- setClass("Age",
contains = "Column"
)
setMethod(f = "initialize",
signature = "Age",
definition = function(.Object)
{
.Object@column_index <- 3
return(.Object)
}
)
setGeneric(name = "FindErrors",
def = function(theObject)
{
standardGeneric("FindErrors")
}
)
setMethod(f = "FindErrors",
signature = "Age",
definition = function(theObject)
{
#FindMisprints(file@table_in, theObject@column_index, theObject@key, theObject@value)
FindMisprintsForNumeric(misprint, file@table_in, theObject@column_index)
}
)
FindErrors(age)
source('D:/Diploma/r_project/Misprint.R')
Outlier <- setClass("Outlier",
contains = "Error"
)
setMethod(f = "initialize",
signature = "Outlier",
definition = function(.Object)
{
.Object@style <- "tomato2"
# .Object@style <- CellStyle(wb) +
# Font(wb, isItalic = TRUE) +
# Fill(foregroundColor = "tomato2") +
# Border(position = c("BOTTOM", "LEFT", "TOP", "RIGHT"))
return(.Object)
}
)
setGeneric(name = "FindOutliers",
def = function(theObject, table, column_index)
{
standardGeneric("FindOutliers")
}
)
setMethod(f = "FindOutliers",
signature = "Outlier",
definition = function(theObject, table, column_index)
{
c <- table[[column_index]]
for (i in 1:length(c))
{
if (is.numeric(c[[i]])){
outliers <- boxplot.stats(table[[i]])$out
if (is.null(outliers) != TRUE) {
#xlsx.createBook(table, sheet_out_name, file_out)
outliers_row_ind <- which(table[[i]] %in% outliers, arr.ind = T, useNames = F)
#outliers_row_ind <- outliers_row_ind + theObject@row_header + theObject@row_symbol
globalOutlier <<- append(globalOutlier, values = outer(outliers_row_ind, i, paste, sep = "."))
cat("Outlier coordinates are ", paste(i, column_index, sep = "."), "\n")
}
}
}
return(theObject)
}
)
Outlier <- setClass("Outlier",
contains = "Error"
)
setMethod(f = "initialize",
signature = "Outlier",
definition = function(.Object)
{
.Object@style <- "tomato2"
# .Object@style <- CellStyle(wb) +
# Font(wb, isItalic = TRUE) +
# Fill(foregroundColor = "tomato2") +
# Border(position = c("BOTTOM", "LEFT", "TOP", "RIGHT"))
return(.Object)
}
)
setGeneric(name = "FindOutliers",
def = function(theObject, table, column_index)
{
standardGeneric("FindOutliers")
}
)
setMethod(f = "FindOutliers",
signature = "Outlier",
definition = function(theObject, table, column_index)
{
outliers_row_ind <- c()
c <- table[[column_index]]
for (i in 1:length(c))
{
if (is.numeric(c[[i]]))
{
outliers <- boxplot.stats(table[[i]])$out
if (is.null(outliers) != TRUE)
{
#xlsx.createBook(table, sheet_out_name, file_out)
outliers_row_ind <- which(table[[i]] %in% outliers, arr.ind = T, useNames = F)
#outliers_row_ind <- outliers_row_ind + theObject@row_header + theObject@row_symbol
globalOutlier <<- append(globalOutlier, values = outer(outliers_row_ind, i, paste, sep = "."))
cat("Outlier coordinates are ", paste(i, column_index, sep = "."), "\n")
}
}
}
#return(theObject)
}
)
globalMissing <- character()
globalMisprint <- character()
globalOutlier <- character()
globalUnsolvedMisprint <- character()
sex <- new("Sex")
FindErrors(sex)
Sex <- setClass("Sex",
contains = "Column"
)
setMethod(f = "initialize",
signature = "Sex",
definition = function(.Object)
{
.Object@key[["Male"]] <- list("м", "муж",
"мужской",
"мужчина",
"мужик")
.Object@value[["Male"]] <- list(1)
.Object@key[["Female"]] <- list("ж",
"жен",
"женский",
"женщина")
.Object@value[["Female"]] <- list(0)
.Object@column_index <- 2
return(.Object)
}
)
setGeneric(name = "FindErrors",
def = function(theObject)
{
standardGeneric("FindErrors")
}
)
setMethod(f = "FindErrors",
signature = "Sex",
definition = function(theObject)
{
#FindMisprints(file@table_in, theObject@column_index, theObject@key, theObject@value)
FindMisprints(misprint, file@table_in, theObject@column_index, theObject@key, theObject@value)
}
)
FindErrors(sex)
Sex <- setClass("Sex",
contains = "Column"
)
setMethod(f = "initialize",
signature = "Sex",
definition = function(.Object)
{
.Object@key[["Male"]] <- list("м", "муж",
"мужской",
"мужчина",
"мужик")
.Object@value[["Male"]] <- list(1)
.Object@key[["Female"]] <- list("ж",
"жен",
"женский",
"женщина")
.Object@value[["Female"]] <- list(0)
.Object@column_index <- 2
return(.Object)
}
)
setGeneric(name = "FindErrors",
def = function(theObject)
{
standardGeneric("FindErrors")
}
)
setMethod(f = "FindErrors",
signature = "Sex",
definition = function(theObject)
{
#FindMisprints(file@table_in, theObject@column_index, theObject@key, theObject@value)
FindMisprints(misprint, file@table_in, theObject@column_index, theObject@key, theObject@value)
}
)
sex <- new("Sex")
FindErrors(sex)
Diabetes <- setClass("Diabetes",
contains = "Column")
setMethod(f = "initialize",
signature = "Diabetes",
definition = function(.Object)
{ #.Object@data <- column_data
.Object@key["FirstDiabetesType"] <- list(c("1 тип",
"1тип",
"первый"))
.Object@value["FirstDiabetesType"] <- list(1)
.Object@key["SecondDiabetesType"] <- list(c("2 тип",
"2тип",
"второй",
"2"))
.Object@value["SecondDiabetesType"] <- list(0)
.Object@column_index <- 5
return(.Object)
}
)
setGeneric(name = "FindErrors",
def = function(theObject)
{
standardGeneric("FindErrors")
}
)
setMethod(f = "FindErrors",
signature = "Diabetes",
definition = function(theObject)
{
#FindMisprints(file@table_in, theObject@column_index, theObject@key, theObject@value)
FindMisprints(misprint, file@table_in, theObject@column_index, theObject@key, theObject@value)
}
)
diabetes <- new("Diabetes")
FindErrors(diabetes)
Age <- setClass("Age",
contains = "Column"
)
setMethod(f = "initialize",
signature = "Age",
definition = function(.Object)
{
.Object@column_index <- 3
return(.Object)
}
)
setGeneric(name = "FindErrors",
def = function(theObject)
{
standardGeneric("FindErrors")
}
)
setMethod(f = "FindErrors",
signature = "Age",
definition = function(theObject)
{
#FindMisprints(file@table_in, theObject@column_index, theObject@key, theObject@value)
FindMisprintsForNumeric(misprint, file@table_in, theObject@column_index)
FindOutliers(outlier, file@table_in, theObject@column_index)
}
)
age <- new("Age")
FindErrors(age)
Outlier <- setClass("Outlier",
contains = "Error"
)
setMethod(f = "initialize",
signature = "Outlier",
definition = function(.Object)
{
.Object@style <- "tomato2"
# .Object@style <- CellStyle(wb) +
# Font(wb, isItalic = TRUE) +
# Fill(foregroundColor = "tomato2") +
# Border(position = c("BOTTOM", "LEFT", "TOP", "RIGHT"))
return(.Object)
}
)
setGeneric(name = "FindOutliers",
def = function(theObject, table, column_index)
{
standardGeneric("FindOutliers")
}
)
setMethod(f = "FindOutliers",
signature = "Outlier",
definition = function(theObject, table, column_index)
{
outliers_row_ind <- c()
c <- table[[column_index]]
for (i in 1:length(c))
{
if (is.numeric(c[[i]]))
{
outliers <- boxplot.stats(table[[i]])$out
if (is.null(outliers) != TRUE)
{
#xlsx.createBook(table, sheet_out_name, file_out)
outliers_row_ind <- which(table[[i]] %in% outliers, arr.ind = T, useNames = F)
#outliers_row_ind <- outliers_row_ind + theObject@row_header + theObject@row_symbol
globalOutlier <<- append(globalOutlier, values = outer(outliers_row_ind, i, paste, sep = "."))
cat("Outlier coordinates are ", paste(i, column_index, sep = "."), "\n")
}
}
}
#return(theObject)
}
)
outlier <- new("Outlier")
FindErrors(age)
Outlier <- setClass("Outlier",
contains = "Error"
)
setMethod(f = "initialize",
signature = "Outlier",
definition = function(.Object)
{
.Object@style <- "tomato2"
# .Object@style <- CellStyle(wb) +
# Font(wb, isItalic = TRUE) +
# Fill(foregroundColor = "tomato2") +
# Border(position = c("BOTTOM", "LEFT", "TOP", "RIGHT"))
return(.Object)
}
)
setGeneric(name = "FindOutliers",
def = function(theObject, table, column_index)
{
standardGeneric("FindOutliers")
}
)
setMethod(f = "FindOutliers",
signature = "Outlier",
definition = function(theObject, table, column_index)
{
outliers_row_ind <- c()
c <- table[[column_index]]
for (i in 1:length(c))
{
if (is.numeric(c[[i]]))
{
outliers <- boxplot.stats(table[[i]])$out
if (!is.null(outliers))
{
#xlsx.createBook(table, sheet_out_name, file_out)
outliers_row_ind <- which(table[[i]] %in% outliers, arr.ind = T, useNames = F)
#outliers_row_ind <- outliers_row_ind + theObject@row_header + theObject@row_symbol
globalOutlier <<- append(globalOutlier, values = outer(outliers_row_ind, i, paste, sep = "."))
cat("Outlier coordinates are ", paste(i, column_index, sep = "."), "\n")
}
}
}
#return(theObject)
}
)
FindErrors(age)
Outlier <- setClass("Outlier",
contains = "Error"
)
setMethod(f = "initialize",
signature = "Outlier",
definition = function(.Object)
{
.Object@style <- "tomato2"
# .Object@style <- CellStyle(wb) +
# Font(wb, isItalic = TRUE) +
# Fill(foregroundColor = "tomato2") +
# Border(position = c("BOTTOM", "LEFT", "TOP", "RIGHT"))
return(.Object)
}
)
setGeneric(name = "FindOutliers",
def = function(theObject, table, column_index)
{
standardGeneric("FindOutliers")
}
)
setMethod(f = "FindOutliers",
signature = "Outlier",
definition = function(theObject, table, column_index)
{
outliers_row_ind <- c()
c <- table[[column_index]]
for (i in 1:length(c))
{
if (is.numeric(c[[i]]))
{
outliers <- boxplot.stats(c[[i]])$out
print(outliers)
outliers <- boxplot.stats(c)$out
if (!is.null(outliers))
{
#xlsx.createBook(table, sheet_out_name, file_out)
outliers_row_ind <- which(c[[i]] %in% outliers, arr.ind = T, useNames = F)
#outliers_row_ind <- outliers_row_ind + theObject@row_header + theObject@row_symbol
globalOutlier <<- append(globalOutlier, values = outer(outliers_row_ind, i, paste, sep = "."))
print(globalOutlier)
cat("Outlier coordinates are ", paste(i, column_index, sep = "."), "\n")
}
}
}
#return(theObject)
}
)
FindErrors(age)
Age <- setClass("Age",
contains = "Column"
)
setMethod(f = "initialize",
signature = "Age",
definition = function(.Object)
{
.Object@column_index <- 3
return(.Object)
}
)
setGeneric(name = "FindErrors",
def = function(theObject)
{
standardGeneric("FindErrors")
}
)
setMethod(f = "FindErrors",
signature = "Age",
definition = function(theObject)
{
#FindMisprints(file@table_in, theObject@column_index, theObject@key, theObject@value)
FindMisprintsForNumeric(misprint, file@table_in, theObject@column_index)
FindOutliers(outlier, file@table_in, theObject@column_index)
}
)
FindErrors(age)
debugSource('D:/Diploma/r_project/Outlier.R', echo=TRUE)
debugSource('D:/Diploma/r_project/Outlier.R', echo=TRUE)
debugSource('D:/Diploma/r_project/Outlier.R', echo=TRUE)
debugSource('D:/Diploma/r_project/Outlier.R', echo=TRUE)
Outlier <- setClass("Outlier",
contains = "Error"
)
setMethod(f = "initialize",
signature = "Outlier",
definition = function(.Object)
{
.Object@style <- "tomato2"
# .Object@style <- CellStyle(wb) +
# Font(wb, isItalic = TRUE) +
# Fill(foregroundColor = "tomato2") +
# Border(position = c("BOTTOM", "LEFT", "TOP", "RIGHT"))
return(.Object)
}
)
setGeneric(name = "FindOutliers",
def = function(theObject, table, column_index)
{
standardGeneric("FindOutliers")
}
)
setMethod(f = "FindOutliers",
signature = "Outlier",
definition = function(theObject, table, column_index)
{
outliers_row_ind <- c()
c <- table[[column_index]]
for (i in 1:length(c))
{
if (is.numeric(c[[i]]))
{
outliers <- boxplot.stats(c[[i]])$out
print(outliers)
outliers <- boxplot.stats(c)$out
if (!is.null(outliers))
{
#xlsx.createBook(table, sheet_out_name, file_out)
outliers_row_ind <- which(c[[i]] %in% outliers, arr.ind = T, useNames = F)
#outliers_row_ind <- outliers_row_ind + theObject@row_header + theObject@row_symbol
globalOutlier <<- append(globalOutlier, values = outer(outliers_row_ind, i, paste, sep = "."))
print(globalOutlier)
cat("Outlier coordinates are ", paste(i, column_index, sep = "."), "\n")
}
}
}
#return(theObject)
}
)
FindOutliers(outlier, file@table_in, age@column_index)
FindOutliers(outlier, file@table_in, age@column_index)
debugSource('D:/Diploma/r_project/Outlier.R', echo=TRUE)
source('D:/Diploma/r_project/Outlier.R')
debugSource('D:/Diploma/r_project/Outlier.R', echo=TRUE)
debugSource('D:/Diploma/r_project/Outlier.R', echo=TRUE)
debugSource('D:/Diploma/r_project/Outlier.R', echo=TRUE)
debugSource('D:/Diploma/r_project/Outlier.R', echo=TRUE)
debugSource('D:/Diploma/r_project/Outlier.R', echo=TRUE)
debugSource('D:/Diploma/r_project/Outlier.R', echo=TRUE)
debugSource('D:/Diploma/r_project/Outlier.R', echo=TRUE)
debugSource('D:/Diploma/r_project/Outlier.R', echo=TRUE)
debugSource('D:/Diploma/r_project/Outlier.R', echo=TRUE)
