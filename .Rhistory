c[i] <- values[[j]][k]
print(c[i])
}
}
}
#misprint_row_ind <- which(c %in% values)
#misprint_row_ind <- which(toupper(c) %in% toupper(dictionary_keys), arr.ind = T, useNames = F)
#misprint_row_ind <- which(data_table[[i]] %in% dictionary_keys, arr.ind = T, useNames = F)
#misprint_row_ind <- misprint_row_ind + theObject@row_header + theObject@row_symbol
#theObject@ind <- append(theObject@ind, values = outer(misprint_row_ind, column_index, paste, sep = "."))
#}
}
return(theObject)
}
)
misprint <- FindMisprints(misprint, file@table, sex@column_index, sex@key, sex@value)
debugSource('D:/Diploma/r_project/Misprint.R', echo=TRUE)
debugSource('D:/Diploma/r_project/Misprint.R', echo=TRUE)
Misprint <- setClass("Misprint",
contains = "Error"
)
setMethod(f = "initialize",
signature = "Misprint",
definition = function(.Object)
{ .Object@style <- "yellow1"
# .Object@style <- CellStyle(wb) +
# Font(wb, isItalic = TRUE) +
# Fill(foregroundColor = "yellow1") +
# Border(position = c("BOTTOM", "LEFT", "TOP", "RIGHT"))
return(.Object)
}
)
setGeneric(name = "FindMisprints",
def = function(theObject, table, column_index, keys, values)
{
standardGeneric("FindMisprints")
}
)
setMethod(f = "FindMisprints",
signature = "Misprint",
definition = function(theObject, table, column_index, keys, values)
{ misprint_row_ind <- 0
c <- table[[column_index]]
for (i in length(c)){
found <- FALSE
for(j in 1:length(values)){
for(k in 1:length(values[j])){
if (c[i] != values[[j]][k]){
#which(toupper(file@table[[2]]) %in% toupper(sex@key[[1]][1]))
found <- TRUE
print(found)
print(c[i])
print(values[[j]][k])
}
print("!!!!!")
}
}
for(a in 1:length(keys)){
for(b in 1:length(keys[j])){
if (toupper(c[i]) == toupper(keys[[a]][b])){
print("HELLOOOOOO")
#print(keys[[j]][k])
#print(c[i])
misprint_row_ind <-  i + theObject@row_header + theObject@row_symbol
print(misprint_row_ind)
theObject@ind <- append(theObject@ind, values = paste(misprint_row_ind, column_index, sep = "."))
print(theObject@ind)
c[i] <- values[[a]][b]
print(c[i])
}
}
}
}
return(theObject)
}
)
debugSource('D:/Diploma/r_project/Misprint.R', echo=TRUE)
debugSource('D:/Diploma/r_project/Misprint.R', echo=TRUE)
Misprint <- setClass("Misprint",
contains = "Error"
)
setMethod(f = "initialize",
signature = "Misprint",
definition = function(.Object)
{ .Object@style <- "yellow1"
# .Object@style <- CellStyle(wb) +
# Font(wb, isItalic = TRUE) +
# Fill(foregroundColor = "yellow1") +
# Border(position = c("BOTTOM", "LEFT", "TOP", "RIGHT"))
return(.Object)
}
)
setGeneric(name = "FindMisprints",
def = function(theObject, table, column_index, keys, values)
{
standardGeneric("FindMisprints")
}
)
setMethod(f = "FindMisprints",
signature = "Misprint",
definition = function(theObject, table, column_index, keys, values)
{ misprint_row_ind <- 0
c <- table[[column_index]]
for (i in length(c)){
found <- FALSE
for(j in 1:length(values)){
for(k in 1:length(values[j])){
if (c[i] != values[[j]][k]){
#which(toupper(file@table[[2]]) %in% toupper(sex@key[[1]][1]))
found <- TRUE
print(found)
print(c[i])
print(values[[j]][k])
}
print("!!!!!")
}
}
for(a in 1:length(keys)){
for(b in 1:length(keys[j])){
if (toupper(c[i]) == toupper(keys[[a]][b])){
print("HELLOOOOOO")
#print(keys[[j]][k])
#print(c[i])
misprint_row_ind <-  i + theObject@row_header + theObject@row_symbol
print(misprint_row_ind)
theObject@ind <- append(theObject@ind, values = paste(misprint_row_ind, column_index, sep = "."))
print(theObject@ind)
#c[i] <- values[[a]][b]
print(c[i])
}
}
}
}
return(theObject)
}
)
debugSource('D:/Diploma/r_project/Misprint.R', echo=TRUE)
debugSource('D:/Diploma/r_project/Misprint.R', echo=TRUE)
debugSource('D:/Diploma/r_project/Misprint.R', echo=TRUE)
debugSource('D:/Diploma/r_project/Misprint.R')
rm(list = a, b)
rm(a)
rm(b)
Misprint <- setClass("Misprint",
contains = "Error"
)
setMethod(f = "initialize",
signature = "Misprint",
definition = function(.Object)
{ .Object@style <- "yellow1"
# .Object@style <- CellStyle(wb) +
# Font(wb, isItalic = TRUE) +
# Fill(foregroundColor = "yellow1") +
# Border(position = c("BOTTOM", "LEFT", "TOP", "RIGHT"))
return(.Object)
}
)
setGeneric(name = "FindMisprints",
def = function(theObject, table, column_index, keys, values)
{
standardGeneric("FindMisprints")
}
)
setMethod(f = "FindMisprints",
signature = "Misprint",
definition = function(theObject, table, column_index, keys, values)
{ misprint_row_ind <- 0
c <- table[[column_index]]
for (i in length(c)){
found <- FALSE
for(j in 1:length(values)){
for(k in 1:length(values[j])){
if (c[i] != values[[j]][k]){
#which(toupper(file@table[[2]]) %in% toupper(sex@key[[1]][1]))
found <- TRUE
print(found)
print(c[i])
print(values[[j]][k])
}
print("!!!!!")
}
}
for(a in 1:length(keys)){
for(b in 1:length(keys[j])){
if (toupper(c[i]) == toupper(keys[[a]][b])){
print("HELLOOOOOO")
#print(keys[[j]][k])
#print(c[i])
misprint_row_ind <-  i + theObject@row_header + theObject@row_symbol
print(misprint_row_ind)
theObject@ind <- append(theObject@ind, values = paste(misprint_row_ind, column_index, sep = "."))
print(theObject@ind)
#c[i] <- values[[a]][b]
print(c[i])
}
}
}
}
return(theObject)
}
)
debugSource('D:/Diploma/r_project/Misprint.R')
source('D:/Diploma/r_project/Misprint.R')
debugSource('D:/Diploma/r_project/Misprint.R')
debugSource('D:/Diploma/r_project/Misprint.R')
debugSource('D:/Diploma/r_project/Misprint.R')
debugSource('D:/Diploma/r_project/Misprint.R')
debugSource('D:/Diploma/r_project/Misprint.R', echo=TRUE)
debugSource('D:/Diploma/r_project/Misprint.R', echo=TRUE)
source('D:/Diploma/r_project/Misprint.R', echo=TRUE)
source('D:/Diploma/r_project/Misprint.R')
misprint <- FindMisprints(misprint, file@table, sex@column_index, sex@key, sex@value)
debugSource('D:/Diploma/r_project/Misprint.R', echo=TRUE)
misprint <- FindMisprints(misprint, file@table, sex@column_index, sex@key, sex@value)
debugSource('D:/Diploma/r_project/Misprint.R', echo=TRUE)
misprint <- FindMisprints(misprint, file@table, sex@column_index, sex@key, sex@value)
debugSource('D:/Diploma/r_project/Misprint.R', echo=TRUE)
debugSource('D:/Diploma/r_project/Misprint.R', echo=TRUE)
debugSource('D:/Diploma/r_project/Misprint.R', echo=TRUE)
source('D:/Diploma/r_project/MissingValue.R', echo=TRUE)
source('D:/Diploma/r_project/Misprint.R', echo=TRUE)
debugSource('D:/Diploma/r_project/Misprint.R', echo=TRUE)
misprint
debugSource('D:/Diploma/r_project/Misprint.R', echo=TRUE)
misprint <- FindMisprints(misprint, file@table, sex@column_index, sex@key, sex@value)
source('D:/Diploma/r_project/Misprint.R', encoding = 'UTF-8', echo=TRUE)
misprint <- FindMisprints(misprint, file@table, sex@column_index, sex@key, sex@value)
misprint
Misprint <- setClass("Misprint",
contains = "Error"
)
setMethod(f = "initialize",
signature = "Misprint",
definition = function(.Object)
{ .Object@style <- "yellow1"
# .Object@style <- CellStyle(wb) +
# Font(wb, isItalic = TRUE) +
# Fill(foregroundColor = "yellow1") +
# Border(position = c("BOTTOM", "LEFT", "TOP", "RIGHT"))
return(.Object)
}
)
setGeneric(name = "FindMisprints",
def = function(theObject, table, column_index, keys, values)
{
standardGeneric("FindMisprints")
}
)
setMethod(f = "FindMisprints",
signature = "Misprint",
definition = function(theObject, table, column_index, keys, values)
{ misprint_row_ind <- 0
c <- table[[column_index]]
for (i in length(c)){
found <- FALSE
for(j in 1:length(values)){
if (toupper(c[i]) == toupper(values[[j]][1])){
#which(toupper(file@table[[2]]) %in% toupper(sex@key[[1]][1]))
print(toupper(c[i]))
print(toupper(values[[j]][1]))
found <- TRUE
}
if (found) next
}
for(a in 1:length(keys)){
for(b in 1:length(keys[j])){
if (toupper(c[i]) == toupper(keys[[a]][b])){
found <- TRUE
misprint_row_ind <-  i + theObject@row_header + theObject@row_symbol
print(misprint_row_ind)
theObject@ind <- append(theObject@ind, values = paste(misprint_row_ind, column_index, sep = "."))
print(theObject@ind)
}
if (!found){
print("Опечатка не распарсена")
}else next
}
}
}
return(theObject)
}
)
misprint <- FindMisprints(misprint, file@table, sex@column_index, sex@key, sex@value)
anna <- TRUE
for (i in 1:10){if (anna) next}
if (anna){ alla <- 4}
alla
debugSource('D:/Diploma/r_project/Misprint.R', encoding = 'UTF-8', echo=TRUE)
debugSource('D:/Diploma/r_project/Misprint.R', encoding = 'UTF-8', echo=TRUE)
debugSource('D:/Diploma/r_project/Misprint.R', encoding = 'UTF-8', echo=TRUE)
debugSource('D:/Diploma/r_project/Misprint.R', encoding = 'UTF-8', echo=TRUE)
Sex <- setClass("Sex",
contains = "Column"
)
setMethod(f = "initialize",
signature = "Sex",
definition = function(.Object)
{
.Object@key[["Male"]] <- list("м", "муж",
"мужской",
"мужчина",
"мужик")
.Object@value[["Male"]] <- list(1)
.Object@key[["Female"]] <- list("ж",
"жен",
"женский",
"женщина")
.Object@value[["Female"]] <- list(0)
.Object@column_index <- 2
return(.Object)
}
)
setGeneric(name = "FindErrors",
def = function(theObject)
{
standardGeneric("FindErrors")
}
)
setMethod(f = "FindErrors",
signature = "Sex",
definition = function(theObject)
{
FindMissingValue(missingValue, file@table, theObject@column_index)
FindMisprints(misprint, file@table, theObject@column_index, theObject@key, theObject@value)
}
)
misprint <- FindMisprints(misprint, file@table, sex@column_index, sex@key, sex@value)
debugSource('D:/Diploma/r_project/Misprint.R', encoding = 'UTF-8', echo=TRUE)
misprint <- FindMisprints(misprint, file@table, sex@column_index, sex@key, sex@value)
debugSource('D:/Diploma/r_project/Misprint.R', encoding = 'UTF-8', echo=TRUE)
misprint <- FindMisprints(misprint, file@table, sex@column_index, sex@key, sex@value)
debugSource('D:/Diploma/r_project/Misprint.R', encoding = 'UTF-8', echo=TRUE)
debugSource('D:/Diploma/r_project/Misprint.R', encoding = 'UTF-8', echo=TRUE)
debugSource('D:/Diploma/r_project/Misprint.R', encoding = 'UTF-8', echo=TRUE)
misprint <- FindMisprints(misprint, file@table, sex@column_index, sex@key, sex@value)
misprint <- FindMisprints(misprint, file@table, sex@column_index, sex@key, sex@value)
print(c[i])
for (i in 1:3) {
for (j in 3:1) {     ## j is iterated in descending order
if ((i+j) > 4) {
break          ## << Only line that differs
} else {
cat(sprintf("i=%d, j=%d\n", i, j))
}}}
for (i in 1:3) {
for (j in 3:1) {     ## j is iterated in descending order
if ((i+j) > 4) {
break          ## << Only line that differs
} else {
cat(sprintf("i=%d, j=%d\n", i, j))
}}}
# i=1, j=3
# i=1, j=2
# i=1, j=1
## Using `next`
for (i in 1:3) {
for (j in 3:1) {     ## j is iterated in descending order
if ((i+j) > 4) {
next           ## << Only line that differs
} else {
cat(sprintf("i=%d, j=%d\n", i, j))
}}}
debugSource('D:/Diploma/r_project/Misprint.R', encoding = 'UTF-8', echo=TRUE)
debugSource('D:/Diploma/r_project/Misprint.R', encoding = 'UTF-8', echo=TRUE)
debugSource('D:/Diploma/r_project/Misprint.R', encoding = 'UTF-8', echo=TRUE)
debugSource('D:/Diploma/r_project/Misprint.R', encoding = 'UTF-8', echo=TRUE)
debugSource('D:/Diploma/r_project/Misprint.R', encoding = 'UTF-8', echo=TRUE)
debugSource('D:/Diploma/r_project/Misprint.R', encoding = 'UTF-8', echo=TRUE)
debugSource('D:/Diploma/r_project/Misprint.R', encoding = 'UTF-8', echo=TRUE)
misprint <- FindMisprints(misprint, file@table, sex@column_index, sex@key, sex@value)
debugSource('D:/Diploma/r_project/Misprint.R', encoding = 'UTF-8', echo=TRUE)
misprint <- FindMisprints(misprint, file@table, sex@column_index, sex@key, sex@value)
debugSource('D:/Diploma/r_project/Misprint.R', encoding = 'UTF-8', echo=TRUE)
misprint <- FindMisprints(misprint, file@table, sex@column_index, sex@key, sex@value)
debugSource('D:/Diploma/r_project/Misprint.R', encoding = 'UTF-8', echo=TRUE)
misprint <- FindMisprints(misprint, file@table, sex@column_index, sex@key, sex@value)
misprint <- FindMisprints(misprint, file@table, sex@column_index, sex@key, sex@value)
debugSource('D:/Diploma/r_project/Misprint.R', encoding = 'UTF-8', echo=TRUE)
misprint <- FindMisprints(misprint, file@table, sex@column_index, sex@key, sex@value)
debugSource('D:/Diploma/r_project/Misprint.R', encoding = 'UTF-8', echo=TRUE)
misprint <- FindMisprints(misprint, file@table, sex@column_index, sex@key, sex@value)
debugSource('D:/Diploma/r_project/Misprint.R', encoding = 'UTF-8', echo=TRUE)
misprint <- FindMisprints(misprint, file@table, sex@column_index, sex@key, sex@value)
debugSource('D:/Diploma/r_project/Misprint.R', encoding = 'UTF-8', echo=TRUE)
source('D:/Diploma/r_project/Misprint.R', encoding = 'UTF-8', echo=TRUE)
debugSource('D:/Diploma/r_project/Misprint.R', encoding = 'UTF-8', echo=TRUE)
misprint <- FindMisprints(misprint, file@table, sex@column_index, sex@key, sex@value)
misprint <- FindMisprints(misprint, file@table, sex@column_index, sex@key, sex@value)
debugSource('D:/Diploma/r_project/Misprint.R', encoding = 'UTF-8', echo=TRUE)
misprint <- FindMisprints(misprint, file@table, sex@column_index, sex@key, sex@value)
debugSource('D:/Diploma/r_project/Misprint.R', encoding = 'UTF-8', echo=TRUE)
misprint <- FindMisprints(misprint, file@table, sex@column_index, sex@key, sex@value)
misprint <- FindMisprints(misprint, file@table, sex@column_index, sex@key, sex@value)
debugSource('D:/Diploma/r_project/Misprint.R', encoding = 'UTF-8', echo=TRUE)
misprint <- FindMisprints(misprint, file@table, sex@column_index, sex@key, sex@value)
debugSource('D:/Diploma/r_project/Misprint.R', encoding = 'UTF-8', echo=TRUE)
misprint <- FindMisprints(misprint, file@table, sex@column_index, sex@key, sex@value)
debugSource('D:/Diploma/r_project/Misprint.R', encoding = 'UTF-8', echo=TRUE)
debugSource('D:/Diploma/r_project/Misprint.R', encoding = 'UTF-8', echo=TRUE)
debugSource('D:/Diploma/r_project/Misprint.R', encoding = 'UTF-8', echo=TRUE)
debugSource('D:/Diploma/r_project/Misprint.R', encoding = 'UTF-8', echo=TRUE)
misprint <- FindMisprints(misprint, file@table, sex@column_index, sex@key, sex@value)
debugSource('D:/Diploma/r_project/Misprint.R', encoding = 'UTF-8', echo=TRUE)
misprint <- FindMisprints(misprint, file@table, sex@column_index, sex@key, sex@value)
debugSource('D:/Diploma/r_project/Misprint.R', encoding = 'UTF-8', echo=TRUE)
misprint <- FindMisprints(misprint, file@table, sex@column_index, sex@key, sex@value)
debugSource('D:/Diploma/r_project/Misprint.R', encoding = 'UTF-8', echo=TRUE)
debugSource('D:/Diploma/r_project/Misprint.R', encoding = 'UTF-8', echo=TRUE)
misprint <- FindMisprints(misprint, file@table, sex@column_index, sex@key, sex@value)
misprint <- FindMisprints(misprint, file@table, sex@column_index, sex@key, sex@value)
debugSource('D:/Diploma/r_project/Misprint.R', encoding = 'UTF-8', echo=TRUE)
misprint <- FindMisprints(misprint, file@table, sex@column_index, sex@key, sex@value)
colors()
UnsolvedMisprint <- setClass("UnsolvedMisprint",
contains = "Error"
)
setMethod(f = "initialize",
signature = "UnsolvedMisprint",
definition = function(.Object)
{ .Object@style <- "orange1"
# .Object@style <- CellStyle(wb) +
# Font(wb, isItalic = TRUE) +
# Fill(foregroundColor = "yellow1") +
# Border(position = c("BOTTOM", "LEFT", "TOP", "RIGHT"))
return(.Object)
}
)
debugSource('D:/Diploma/r_project/Misprint.R', encoding = 'UTF-8', echo=TRUE)
misprint <- FindMisprints(misprint, file@table, sex@column_index, sex@key, sex@value)
debugSource('D:/Diploma/r_project/Misprint.R', encoding = 'UTF-8', echo=TRUE)
misprint <- FindMisprints(misprint, file@table, sex@column_index, sex@key, sex@value)
print(c[i])
debugSource('D:/Diploma/r_project/Misprint.R', encoding = 'UTF-8', echo=TRUE)
misprint <- FindMisprints(misprint, file@table, sex@column_index, sex@key, sex@value)
print(c[i])
debugSource('D:/Diploma/r_project/Misprint.R', echo=TRUE)
debugSource('D:/Diploma/r_project/Misprint.R', echo=TRUE)
misprint <- FindMisprints(misprint, file@table, sex@column_index, sex@key, sex@value)
source('D:/Diploma/r_project/Misprint.R', echo=TRUE)
misprint <- FindMisprints(misprint, file@table, sex@column_index, sex@key, sex@value)
tmp <- file@table[[sex@column_index]]
tmp
c <- tmp[-missingValue@ind]
c <- names(tmp[-missingValue@ind])
c <- names(tmp[[-missingValue@ind]])
c <- tmp[[-missingValue@ind]]
file@table[[-missingValue]]
names(file@table[[-missingValue]])
file@table[["2.1"]]
file@table[["1.1"]]
names(file@table["1.1"])
names(file@table[["1.1"]])
file@table[1,1]
file@table[2,1]
file@table[1,2]
file@table[-(2,1)]
file@table[1,2]
file@table[-1,2]
source('D:/Diploma/r_project/Misprint.R', echo=TRUE)
misprint <- FindMisprints(misprint, file@table, sex@column_index, sex@key, sex@value)
misprint <- FindMisprints(misprint, file@table, sex@column_index, sex@key, sex@value, missingValue@ind)
source('D:/Diploma/r_project/Misprint.R', echo=TRUE)
misprint <- FindMisprints(misprint, file@table, sex@column_index, sex@key, sex@value, missingValue@ind)
c[8]
source('D:/Diploma/r_project/Misprint.R', echo=TRUE)
misprint <- FindMisprints(misprint, file@table, sex@column_index, sex@key, sex@value, missingValue@ind)
c[8]
print (c)
print(missing)
print(c[-missing])
source('D:/Diploma/r_project/MissingValue.R', echo=TRUE)
missingValue@ind <- character(0)
missingValue@ind <- FindMissingValue(missingValue, file@table, sex@column_index)
missingValue
source('D:/Diploma/r_project/MissingValue.R', echo=TRUE)
missingValue@ind <- FindMissingValue(missingValue, file@table, sex@column_index)
missingValue@ind <- FindErrors(sex)
source('D:/Diploma/r_project/Sex.R', encoding = 'UTF-8', echo=TRUE)
missingValue <- FindErrors(sex)
missingValue
source('D:/Diploma/r_project/Misprint.R', echo=TRUE)
misprint <- FindMisprints(misprint, file@table, sex@column_index, sex@key, sex@value, missingValue@ind)
file@table[[sex@column_index]]
file@table[-missingValue@ind]
file@table[[-missingValue@ind]]
c <- missingValue@ind
file@table[-c]
file@table[[-c]]
file@table[[-(2,2)]]
file@table[[-2,-2]]
file@table[[-2,2]]
file@table[-2,2]
file@table[-2,-2]
file@table[-(2,2)]
file@table(-[2,2])
file@table[missingValue@ind]
file@table[[missingValue@ind]]
missingValue@ind
file@table[10,2]
file@table["10,2"]
a <- as.numeric(a)
a <- as.numeric(missingValue@ind)
a
rm(a)
a <- missingValue@ind
a
as.numeric(a)
is.vector(a)
a <- c("10,2", "109.2")
f
a
as.numeric(a)
