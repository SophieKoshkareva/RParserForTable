print(mis_row_ind)
if (is.null(mis_row_ind) == TRUE) {
print("No missing values")
# xlsx.createBook(x, sheet_out_name, file_out)
} else {
mis_row_ind <- mis_row_ind + theObject@row_header + theObject@row_symbol
print(mis_row_ind)
theObject@ind <- append(theObject@ind, values = outer(mis_row_ind, column_index, paste, sep = "."))
#theObject@ind <- apply(mis_row_ind, 1, paste, collapse = ".")
}
return(theObject)
}
)
missingValue <- FindMissingValue(missingValue, file@table, sex@column_index)
FindMissingValue(missingValue, file@table, sex@column_index)
a <- which(is.na(file@table[sex@column_index]), arr.ind = TRUE, useNames = FALSE)
a
rm(missingValue)
missingValue <- new("MissingValue")
missingValue
missingValue <- FindMissingValue(missingValue, file@table, sex@column_index)
missingValue@ind <- character(0)
missingValue
MissingValue <- setClass("MissingValue",
contains = "Error"
)
setMethod(f = "initialize",
signature = "MissingValue",
definition = function(.Object)
{ .Object@style <- "lightgray"
# .Object@style <- CellStyle(wb) +
# Font(wb, isItalic = TRUE) +
# Fill(foregroundColor = "lightgray") +
# Border(position = c("BOTTOM", "LEFT", "TOP", "RIGHT"))
return(.Object)
}
)
setGeneric(name = "FindMissingValue",
def = function(theObject, table, column_index)
{
standardGeneric("FindMissingValue")
}
)
setMethod(f = "FindMissingValue",
signature = "MissingValue",
definition = function(theObject, table, column_index)
{
#column <- column_index
#print(column)
#column_data <- table[column_index]
# print(column_data)
print(column_index)
print(table[column_index])
mis_row_ind <- which(is.na(table[column_index]), arr.ind = TRUE, useNames = FALSE)
print(mis_row_ind)
if (is.null(mis_row_ind) == TRUE) {
print("No missing values")
# xlsx.createBook(x, sheet_out_name, file_out)
} else {
mis_row_ind <- mis_row_ind + theObject@row_header + theObject@row_symbol
print(mis_row_ind)
theObject@ind <- append(theObject@ind, values = outer(mis_row_ind, column_index, paste, sep = "."))
#theObject@ind <- apply(mis_row_ind, 1, paste, collapse = ".")
}
return(theObject)
}
)
missingValue <- FindMissingValue(missingValue, file@table, sex@column_index)
MissingValue <- setClass("MissingValue",
contains = "Error"
)
setMethod(f = "initialize",
signature = "MissingValue",
definition = function(.Object)
{ .Object@style <- "lightgray"
# .Object@style <- CellStyle(wb) +
# Font(wb, isItalic = TRUE) +
# Fill(foregroundColor = "lightgray") +
# Border(position = c("BOTTOM", "LEFT", "TOP", "RIGHT"))
return(.Object)
}
)
setGeneric(name = "FindMissingValue",
def = function(theObject, table, column_index)
{
standardGeneric("FindMissingValue")
}
)
setMethod(f = "FindMissingValue",
signature = "MissingValue",
definition = function(theObject, table, column_index)
{
#column <- column_index
#print(column)
#column_data <- table[column_index]
# print(column_data)
print(column_index)
print(table[column_index])
a <- which(is.na(table[column_index]))
mis_row_ind <- which(is.na(table[column_index]), arr.ind = TRUE, useNames = FALSE)
print(mis_row_ind)
if (is.null(mis_row_ind) == TRUE) {
print("No missing values")
# xlsx.createBook(x, sheet_out_name, file_out)
} else {
mis_row_ind <- mis_row_ind + theObject@row_header + theObject@row_symbol
print(mis_row_ind)
theObject@ind <- append(theObject@ind, values = outer(mis_row_ind, column_index, paste, sep = "."))
#theObject@ind <- apply(mis_row_ind, 1, paste, collapse = ".")
}
return(theObject)
}
)
missingValue <- FindMissingValue(missingValue, file@table, sex@column_index)
source('D:/Diploma/r_project/MissingValue.R', echo=TRUE)
missingValue <- FindMissingValue(missingValue, file@table, sex@column_index)
missingValue@ind <- character(0)
missingValue
missingValue <- FindMissingValue(missingValue, file@table, sex@column_index)
source('D:/Diploma/r_project/MissingValue.R', echo=TRUE)
missingValue <- FindMissingValue(missingValue, file@table, sex@column_index)
missingValue
missingValue@ind <- NULL
missingValue@ind <- character(0)
missingValue
source('D:/Diploma/r_project/MissingValue.R', echo=TRUE)
missingValue <- FindMissingValue(missingValue, file@table, sex@column_index)
missingValue
source('D:/Diploma/r_project/MissingValue.R', echo=TRUE)
missingValue
missingValue@ind <- character(0)
missingValue <- FindMissingValue(missingValue, file@table, sex@column_index)
source('D:/Diploma/r_project/MissingValue.R', echo=TRUE)
missingValue <- FindMissingValue(missingValue, file@table, sex@column_index)
source('D:/Diploma/r_project/MissingValue.R', echo=TRUE)
missingValue <- FindMissingValue(missingValue, file@table, sex@column_index)
missingValue
missingValue@ind <- character(0)
missingValue <- FindMissingValue(missingValue, file@table, sex@column_index)
missingValue
which(LETTERS == "R")
missingValue@ind <- character(0)
sex <- FindErrors(sex)
Sex <- setClass("Sex",
contains = "Column"
)
setMethod(f = "initialize",
signature = "Sex",
definition = function(.Object)
{
.Object@key[["Male"]] <- list("м", "муж",
"мужской",
"мужчина",
"мужик")
.Object@value[["Male"]] <- list(1)
.Object@key[["Female"]] <- list("ж",
"жен",
"женский",
"женщина")
.Object@value[["Female"]] <- list(0)
.Object@column_index <- 2
return(.Object)
}
)
setGeneric(name = "FindErrors",
def = function(theObject)
{
standardGeneric("FindErrors")
}
)
setMethod(f = "FindErrors",
signature = "Sex",
definition = function(theObject)
{
FindMissingValue(missingValue, file@table, theObject@column_index)
# FindMisprints(theObject, myfile@table)
}
)
sex
sex <- FindErrors(sex)
MissingValue <- setClass("MissingValue",
contains = "Error"
)
setMethod(f = "initialize",
signature = "MissingValue",
definition = function(.Object)
{ .Object@style <- "lightgray"
# .Object@style <- CellStyle(wb) +
# Font(wb, isItalic = TRUE) +
# Fill(foregroundColor = "lightgray") +
# Border(position = c("BOTTOM", "LEFT", "TOP", "RIGHT"))
return(.Object)
}
)
setGeneric(name = "FindMissingValue",
def = function(theObject, table, column_index)
{
standardGeneric("FindMissingValue")
}
)
setMethod(f = "FindMissingValue",
signature = "MissingValue",
definition = function(theObject, table, column_index)
{ mis_row_ind <- 0
#print(a <- which(is.na(table[column_index])))
#print(mis_row_ind)
mis_row_ind <- which(is.na(table[column_index]))
#mis_row_ind <- which(is.na(table[column_index]), arr.ind = TRUE, useNames = FALSE)
print(mis_row_ind)
if (is.null(mis_row_ind) == TRUE) {
print("No missing values")
# xlsx.createBook(x, sheet_out_name, file_out)
} else {
mis_row_ind <- mis_row_ind + theObject@row_header + theObject@row_symbol
#print(mis_row_ind)
theObject@ind <- append(theObject@ind, values = outer(mis_row_ind, column_index, paste, sep = "."))
#theObject@ind <- apply(mis_row_ind, 1, paste, collapse = ".")
}
#return(theObject)
}
)
setGeneric(name = "FindErrors",
def = function(theObject)
{
standardGeneric("FindErrors")
}
)
setMethod(f = "FindErrors",
signature = "Sex",
definition = function(theObject)
{
FindMissingValue(missingValue, file@table, theObject@column_index)
# FindMisprints(theObject, myfile@table)
}
)
sex <- FindErrors(sex)
MissingValue <- setClass("MissingValue",
contains = "Error"
)
setMethod(f = "initialize",
signature = "MissingValue",
definition = function(.Object)
{ .Object@style <- "lightgray"
# .Object@style <- CellStyle(wb) +
# Font(wb, isItalic = TRUE) +
# Fill(foregroundColor = "lightgray") +
# Border(position = c("BOTTOM", "LEFT", "TOP", "RIGHT"))
return(.Object)
}
)
setGeneric(name = "FindMissingValue",
def = function(theObject, table, column_index)
{
standardGeneric("FindMissingValue")
}
)
setMethod(f = "FindMissingValue",
signature = "MissingValue",
definition = function(theObject, table, column_index)
{ mis_row_ind <- 0
#print(a <- which(is.na(table[column_index])))
#print(mis_row_ind)
mis_row_ind <- which(is.na(table[column_index]))
#mis_row_ind <- which(is.na(table[column_index]), arr.ind = TRUE, useNames = FALSE)
print(mis_row_ind)
if (is.null(mis_row_ind) == TRUE) {
print("No missing values")
# xlsx.createBook(x, sheet_out_name, file_out)
} else {
mis_row_ind <- mis_row_ind + theObject@row_header + theObject@row_symbol
#print(mis_row_ind)
theObject@ind <- append(theObject@ind, values = outer(mis_row_ind, column_index, paste, sep = "."))
#theObject@ind <- apply(mis_row_ind, 1, paste, collapse = ".")
}
return(theObject)
}
)
sex <- FindErrors(sex)
Sex <- setClass("Sex",
contains = "Column"
)
setMethod(f = "initialize",
signature = "Sex",
definition = function(.Object)
{
.Object@key[["Male"]] <- list("м", "муж",
"мужской",
"мужчина",
"мужик")
.Object@value[["Male"]] <- list(1)
.Object@key[["Female"]] <- list("ж",
"жен",
"женский",
"женщина")
.Object@value[["Female"]] <- list(0)
.Object@column_index <- 2
return(.Object)
}
)
setGeneric(name = "FindErrors",
def = function(theObject)
{
standardGeneric("FindErrors")
}
)
setMethod(f = "FindErrors",
signature = "Sex",
definition = function(theObject)
{
FindMissingValue(missingValue, file@table, theObject@column_index)
# FindMisprints(theObject, myfile@table)
}
)
sex <- FindErrors(sex)
sex
rm(sex)
sex <- new("Sex")
sex
sex <- FindErrors(sex)
sex
MissingValue <- setClass("MissingValue",
contains = "Error"
)
setMethod(f = "initialize",
signature = "MissingValue",
definition = function(.Object)
{ .Object@style <- "lightgray"
# .Object@style <- CellStyle(wb) +
# Font(wb, isItalic = TRUE) +
# Fill(foregroundColor = "lightgray") +
# Border(position = c("BOTTOM", "LEFT", "TOP", "RIGHT"))
return(.Object)
}
)
setGeneric(name = "FindMissingValue",
def = function(theObject, table, column_index)
{
standardGeneric("FindMissingValue")
}
)
setMethod(f = "FindMissingValue",
signature = "MissingValue",
definition = function(theObject, table, column_index)
{ mis_row_ind <- 0
#print(a <- which(is.na(table[column_index])))
#print(mis_row_ind)
mis_row_ind <- which(is.na(table[column_index]))
#mis_row_ind <- which(is.na(table[column_index]), arr.ind = TRUE, useNames = FALSE)
print(mis_row_ind)
if (is.null(mis_row_ind) == TRUE) {
print("No missing values")
# xlsx.createBook(x, sheet_out_name, file_out)
} else {
mis_row_ind <- mis_row_ind + theObject@row_header + theObject@row_symbol
#print(mis_row_ind)
theObject@ind <- append(theObject@ind, values = outer(mis_row_ind, column_index, paste, sep = "."))
#theObject@ind <- apply(mis_row_ind, 1, paste, collapse = ".")
}
#return(theObject)
}
)
rm(sex)
rm(missingValue)
sex <- new("Sex")
sex
MissingValue <- new("MissingValue")
rm(MissingValue)
MissingValue <- setClass("MissingValue",
contains = "Error"
)
setMethod(f = "initialize",
signature = "MissingValue",
definition = function(.Object)
{ .Object@style <- "lightgray"
# .Object@style <- CellStyle(wb) +
# Font(wb, isItalic = TRUE) +
# Fill(foregroundColor = "lightgray") +
# Border(position = c("BOTTOM", "LEFT", "TOP", "RIGHT"))
return(.Object)
}
)
setGeneric(name = "FindMissingValue",
def = function(theObject, table, column_index)
{
standardGeneric("FindMissingValue")
}
)
setMethod(f = "FindMissingValue",
signature = "MissingValue",
definition = function(theObject, table, column_index)
{ mis_row_ind <- 0
#print(a <- which(is.na(table[column_index])))
#print(mis_row_ind)
mis_row_ind <- which(is.na(table[column_index]))
#mis_row_ind <- which(is.na(table[column_index]), arr.ind = TRUE, useNames = FALSE)
print(mis_row_ind)
if (is.null(mis_row_ind) == TRUE) {
print("No missing values")
# xlsx.createBook(x, sheet_out_name, file_out)
} else {
mis_row_ind <- mis_row_ind + theObject@row_header + theObject@row_symbol
#print(mis_row_ind)
theObject@ind <- append(theObject@ind, values = outer(mis_row_ind, column_index, paste, sep = "."))
#theObject@ind <- apply(mis_row_ind, 1, paste, collapse = ".")
}
#return(theObject)
}
)
missingValue <- new("MissingValue")
missingValue
Sex <- setClass("Sex",
contains = "Column"
)
setMethod(f = "initialize",
signature = "Sex",
definition = function(.Object)
{
.Object@key[["Male"]] <- list("м", "муж",
"мужской",
"мужчина",
"мужик")
.Object@value[["Male"]] <- list(1)
.Object@key[["Female"]] <- list("ж",
"жен",
"женский",
"женщина")
.Object@value[["Female"]] <- list(0)
.Object@column_index <- 2
return(.Object)
}
)
setGeneric(name = "FindErrors",
def = function(theObject)
{
standardGeneric("FindErrors")
}
)
setMethod(f = "FindErrors",
signature = "Sex",
definition = function(theObject)
{
FindMissingValue(missingValue, file@table, theObject@column_index)
# FindMisprints(theObject, myfile@table)
}
)
source('D:/Diploma/r_project/Sex.R', encoding = 'UTF-8', echo=TRUE)
FindErrors(sex)
sex
missingValue
sex <- FindErrors(sex)
sex
missingValue
MissingValue <- setClass("MissingValue",
contains = "Error"
)
setMethod(f = "initialize",
signature = "MissingValue",
definition = function(.Object)
{ .Object@style <- "lightgray"
# .Object@style <- CellStyle(wb) +
# Font(wb, isItalic = TRUE) +
# Fill(foregroundColor = "lightgray") +
# Border(position = c("BOTTOM", "LEFT", "TOP", "RIGHT"))
return(.Object)
}
)
setGeneric(name = "FindMissingValue",
def = function(theObject, table, column_index)
{
standardGeneric("FindMissingValue")
}
)
setMethod(f = "FindMissingValue",
signature = "MissingValue",
definition = function(theObject, table, column_index)
{ mis_row_ind <- 0
#print(a <- which(is.na(table[column_index])))
#print(mis_row_ind)
mis_row_ind <- which(is.na(table[column_index]))
#mis_row_ind <- which(is.na(table[column_index]), arr.ind = TRUE, useNames = FALSE)
print(mis_row_ind)
if (is.null(mis_row_ind) == TRUE) {
print("No missing values")
# xlsx.createBook(x, sheet_out_name, file_out)
} else {
mis_row_ind <- mis_row_ind + theObject@row_header + theObject@row_symbol
#print(mis_row_ind)
theObject@ind <- append(theObject@ind, values = outer(mis_row_ind, column_index, paste, sep = "."))
#theObject@ind <- apply(mis_row_ind, 1, paste, collapse = ".")
}
return(theObject)
}
)
source('D:/Diploma/r_project/MissingValue.R', echo=TRUE)
rm(sex)
sex <- new("Sex")
sex
missingValue
FindErrors(sex)
missingValue
missingValue <- FindErrors(sex)
missingV
missingValue
sex
source('D:/Diploma/r_project/MissingValue.R', echo=TRUE)
missingValue@ind <- character(0)
missingValue <- FindErrors(sex)
missingValue
sex
missingValue@ind <- character(0)
missingValue <- FindErrors(sex)
missingValue
