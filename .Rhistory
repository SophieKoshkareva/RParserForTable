}
#misprint_row_ind <- which(c %in% values)
#misprint_row_ind <- which(toupper(c) %in% toupper(dictionary_keys), arr.ind = T, useNames = F)
#misprint_row_ind <- which(data_table[[i]] %in% dictionary_keys, arr.ind = T, useNames = F)
#misprint_row_ind <- misprint_row_ind + theObject@row_header + theObject@row_symbol
#theObject@ind <- append(theObject@ind, values = outer(misprint_row_ind, column_index, paste, sep = "."))
#}
}
return(theObject)
}
)
misprint <- FindMisprints(misprint, file@table, sex@column_index, sex@key, sex@value)
Misprint <- setClass("Misprint",
contains = "Error"
)
setMethod(f = "initialize",
signature = "Misprint",
definition = function(.Object)
{ .Object@style <- "yellow1"
# .Object@style <- CellStyle(wb) +
# Font(wb, isItalic = TRUE) +
# Fill(foregroundColor = "yellow1") +
# Border(position = c("BOTTOM", "LEFT", "TOP", "RIGHT"))
return(.Object)
}
)
setGeneric(name = "FindMisprints",
def = function(theObject, table, column_index, keys, values)
{
standardGeneric("FindMisprints")
}
)
setMethod(f = "FindMisprints",
signature = "Misprint",
definition = function(theObject, table, column_index, keys, values)
{ misprint_row_ind <- 0
c <- table[[column_index]]
for (i in length(c)){
found <- FALSE
for(j in 1:length(values)){
for(k in 1:length(values[j])){
print(c[i])
#misprint_row_ind <- which(c %in% values)
if (c[i] != values[[j]][k]){
#which(file@table[[2]] %in% sex@value[[2]])
found <- TRUE
print(found)
print(c[i])
print(values[j])
print(values[[j]][k])
}
print("!!!!!")
next
}
}
for(j in 1:length(keys)){
for(k in 1:length(keys[j])){
if (toupper(c[i]) == toupper(keys[[j]][k])){
print("HELLOOOOOO")
#print(keys[[j]][k])
#print(c[i])
misprint_row_ind <-  i + theObject@row_header + theObject@row_symbol
print(misprint_row_ind)
theObject@ind <- append(theObject@ind, values = paste(misprint_row_ind, column_index, sep = "."))
print(theObject@ind)
c[i] <- values[[j]][k]
print(c[i])
}
}
}
#misprint_row_ind <- which(c %in% values)
#misprint_row_ind <- which(toupper(c) %in% toupper(dictionary_keys), arr.ind = T, useNames = F)
#misprint_row_ind <- which(data_table[[i]] %in% dictionary_keys, arr.ind = T, useNames = F)
#misprint_row_ind <- misprint_row_ind + theObject@row_header + theObject@row_symbol
#theObject@ind <- append(theObject@ind, values = outer(misprint_row_ind, column_index, paste, sep = "."))
#}
}
return(theObject)
}
)
misprint <- FindMisprints(misprint, file@table, sex@column_index, sex@key, sex@value)
sex@value[[1]]
sex@key[[1]][2]
sex@key[[1]]
a <- which(file@table[[2]] %in% sex@key[[1]])
a
a <- which(file@table[[2]] %in% sex@key[[1]][1])
a
a
sex@key[[1]]
which(file@table[[2]] %in% sex@key[[2]])
which(file@table[[2]] %in% sex@key[[2]][1])
which(file@table[[2]] %in% sex@key[1])
which(file@table[[2]] %in% sex@key[1][[1]])
which(file@table[[2]] %in% sex@value[[1]])
sex@value[[1]]
sex@value[1]
sex@key[[1]]
which(file@table[[2]] %in% sex@key[[1]][1])
which(file@table[[2]] %in% toupper(sex@key[[1]][1]))
which(toupper(file@table[[2]]) %in% toupper(sex@key[[1]][1]))
a <- 5
file@table[a, 2]
1:10 %in% c(1,3,5,9)
Misprint <- setClass("Misprint",
contains = "Error"
)
setMethod(f = "initialize",
signature = "Misprint",
definition = function(.Object)
{ .Object@style <- "yellow1"
# .Object@style <- CellStyle(wb) +
# Font(wb, isItalic = TRUE) +
# Fill(foregroundColor = "yellow1") +
# Border(position = c("BOTTOM", "LEFT", "TOP", "RIGHT"))
return(.Object)
}
)
setGeneric(name = "FindMisprints",
def = function(theObject, table, column_index, keys, values)
{
standardGeneric("FindMisprints")
}
)
setMethod(f = "FindMisprints",
signature = "Misprint",
definition = function(theObject, table, column_index, keys, values)
{ misprint_row_ind <- 0
c <- table[[column_index]]
for (i in length(c)){
found <- FALSE
for(j in 1:length(values)){
for(k in 1:length(values[j])){
if (c[i] != values[[j]][k]){
#which(toupper(file@table[[2]]) %in% toupper(sex@key[[1]][1]))
found <- TRUE
print(found)
print(c[i])
print(values[[j]][k])
}
print("!!!!!")
next
}
break
}
for(j in 1:length(keys)){
for(k in 1:length(keys[j])){
if (toupper(c[i]) == toupper(keys[[j]][k])){
print("HELLOOOOOO")
#print(keys[[j]][k])
#print(c[i])
misprint_row_ind <-  i + theObject@row_header + theObject@row_symbol
print(misprint_row_ind)
theObject@ind <- append(theObject@ind, values = paste(misprint_row_ind, column_index, sep = "."))
print(theObject@ind)
c[i] <- values[[j]][k]
print(c[i])
}
}
}
#misprint_row_ind <- which(c %in% values)
#misprint_row_ind <- which(toupper(c) %in% toupper(dictionary_keys), arr.ind = T, useNames = F)
#misprint_row_ind <- which(data_table[[i]] %in% dictionary_keys, arr.ind = T, useNames = F)
#misprint_row_ind <- misprint_row_ind + theObject@row_header + theObject@row_symbol
#theObject@ind <- append(theObject@ind, values = outer(misprint_row_ind, column_index, paste, sep = "."))
#}
}
return(theObject)
}
)
misprint <- FindMisprints(misprint, file@table, sex@column_index, sex@key, sex@value)
misprint
debugSource('D:/Diploma/r_project/Misprint.R', echo=TRUE)
Misprint <- setClass("Misprint",
contains = "Error"
)
setMethod(f = "initialize",
signature = "Misprint",
definition = function(.Object)
{ .Object@style <- "yellow1"
# .Object@style <- CellStyle(wb) +
# Font(wb, isItalic = TRUE) +
# Fill(foregroundColor = "yellow1") +
# Border(position = c("BOTTOM", "LEFT", "TOP", "RIGHT"))
return(.Object)
}
)
setGeneric(name = "FindMisprints",
def = function(theObject, table, column_index, keys, values)
{
standardGeneric("FindMisprints")
}
)
setMethod(f = "FindMisprints",
signature = "Misprint",
definition = function(theObject, table, column_index, keys, values)
{ misprint_row_ind <- 0
c <- table[[column_index]]
for (i in length(c)){
found <- FALSE
for(j in 1:length(values)){
for(k in 1:length(values[j])){
if (c[i] != values[[j]][k]){
#which(toupper(file@table[[2]]) %in% toupper(sex@key[[1]][1]))
found <- TRUE
print(found)
print(c[i])
print(values[[j]][k])
}
print("!!!!!")
next
}
break
}
for(j in 1:length(keys)){
for(k in 1:length(keys[j])){
if (toupper(c[i]) == toupper(keys[[j]][k])){
print("HELLOOOOOO")
#print(keys[[j]][k])
#print(c[i])
misprint_row_ind <-  i + theObject@row_header + theObject@row_symbol
print(misprint_row_ind)
theObject@ind <- append(theObject@ind, values = paste(misprint_row_ind, column_index, sep = "."))
print(theObject@ind)
c[i] <- values[[j]][k]
print(c[i])
}
}
}
#misprint_row_ind <- which(c %in% values)
#misprint_row_ind <- which(toupper(c) %in% toupper(dictionary_keys), arr.ind = T, useNames = F)
#misprint_row_ind <- which(data_table[[i]] %in% dictionary_keys, arr.ind = T, useNames = F)
#misprint_row_ind <- misprint_row_ind + theObject@row_header + theObject@row_symbol
#theObject@ind <- append(theObject@ind, values = outer(misprint_row_ind, column_index, paste, sep = "."))
#}
}
return(theObject)
}
)
misprint <- FindMisprints(misprint, file@table, sex@column_index, sex@key, sex@value)
debugSource('D:/Diploma/r_project/Misprint.R', echo=TRUE)
debugSource('D:/Diploma/r_project/Misprint.R', echo=TRUE)
Misprint <- setClass("Misprint",
contains = "Error"
)
setMethod(f = "initialize",
signature = "Misprint",
definition = function(.Object)
{ .Object@style <- "yellow1"
# .Object@style <- CellStyle(wb) +
# Font(wb, isItalic = TRUE) +
# Fill(foregroundColor = "yellow1") +
# Border(position = c("BOTTOM", "LEFT", "TOP", "RIGHT"))
return(.Object)
}
)
setGeneric(name = "FindMisprints",
def = function(theObject, table, column_index, keys, values)
{
standardGeneric("FindMisprints")
}
)
setMethod(f = "FindMisprints",
signature = "Misprint",
definition = function(theObject, table, column_index, keys, values)
{ misprint_row_ind <- 0
c <- table[[column_index]]
for (i in length(c)){
found <- FALSE
for(j in 1:length(values)){
for(k in 1:length(values[j])){
if (c[i] != values[[j]][k]){
#which(toupper(file@table[[2]]) %in% toupper(sex@key[[1]][1]))
found <- TRUE
print(found)
print(c[i])
print(values[[j]][k])
}
print("!!!!!")
}
}
for(a in 1:length(keys)){
for(b in 1:length(keys[j])){
if (toupper(c[i]) == toupper(keys[[a]][b])){
print("HELLOOOOOO")
#print(keys[[j]][k])
#print(c[i])
misprint_row_ind <-  i + theObject@row_header + theObject@row_symbol
print(misprint_row_ind)
theObject@ind <- append(theObject@ind, values = paste(misprint_row_ind, column_index, sep = "."))
print(theObject@ind)
c[i] <- values[[a]][b]
print(c[i])
}
}
}
}
return(theObject)
}
)
debugSource('D:/Diploma/r_project/Misprint.R', echo=TRUE)
debugSource('D:/Diploma/r_project/Misprint.R', echo=TRUE)
Misprint <- setClass("Misprint",
contains = "Error"
)
setMethod(f = "initialize",
signature = "Misprint",
definition = function(.Object)
{ .Object@style <- "yellow1"
# .Object@style <- CellStyle(wb) +
# Font(wb, isItalic = TRUE) +
# Fill(foregroundColor = "yellow1") +
# Border(position = c("BOTTOM", "LEFT", "TOP", "RIGHT"))
return(.Object)
}
)
setGeneric(name = "FindMisprints",
def = function(theObject, table, column_index, keys, values)
{
standardGeneric("FindMisprints")
}
)
setMethod(f = "FindMisprints",
signature = "Misprint",
definition = function(theObject, table, column_index, keys, values)
{ misprint_row_ind <- 0
c <- table[[column_index]]
for (i in length(c)){
found <- FALSE
for(j in 1:length(values)){
for(k in 1:length(values[j])){
if (c[i] != values[[j]][k]){
#which(toupper(file@table[[2]]) %in% toupper(sex@key[[1]][1]))
found <- TRUE
print(found)
print(c[i])
print(values[[j]][k])
}
print("!!!!!")
}
}
for(a in 1:length(keys)){
for(b in 1:length(keys[j])){
if (toupper(c[i]) == toupper(keys[[a]][b])){
print("HELLOOOOOO")
#print(keys[[j]][k])
#print(c[i])
misprint_row_ind <-  i + theObject@row_header + theObject@row_symbol
print(misprint_row_ind)
theObject@ind <- append(theObject@ind, values = paste(misprint_row_ind, column_index, sep = "."))
print(theObject@ind)
#c[i] <- values[[a]][b]
print(c[i])
}
}
}
}
return(theObject)
}
)
debugSource('D:/Diploma/r_project/Misprint.R', echo=TRUE)
debugSource('D:/Diploma/r_project/Misprint.R', echo=TRUE)
debugSource('D:/Diploma/r_project/Misprint.R', echo=TRUE)
debugSource('D:/Diploma/r_project/Misprint.R')
rm(list = a, b)
rm(a)
rm(b)
Misprint <- setClass("Misprint",
contains = "Error"
)
setMethod(f = "initialize",
signature = "Misprint",
definition = function(.Object)
{ .Object@style <- "yellow1"
# .Object@style <- CellStyle(wb) +
# Font(wb, isItalic = TRUE) +
# Fill(foregroundColor = "yellow1") +
# Border(position = c("BOTTOM", "LEFT", "TOP", "RIGHT"))
return(.Object)
}
)
setGeneric(name = "FindMisprints",
def = function(theObject, table, column_index, keys, values)
{
standardGeneric("FindMisprints")
}
)
setMethod(f = "FindMisprints",
signature = "Misprint",
definition = function(theObject, table, column_index, keys, values)
{ misprint_row_ind <- 0
c <- table[[column_index]]
for (i in length(c)){
found <- FALSE
for(j in 1:length(values)){
for(k in 1:length(values[j])){
if (c[i] != values[[j]][k]){
#which(toupper(file@table[[2]]) %in% toupper(sex@key[[1]][1]))
found <- TRUE
print(found)
print(c[i])
print(values[[j]][k])
}
print("!!!!!")
}
}
for(a in 1:length(keys)){
for(b in 1:length(keys[j])){
if (toupper(c[i]) == toupper(keys[[a]][b])){
print("HELLOOOOOO")
#print(keys[[j]][k])
#print(c[i])
misprint_row_ind <-  i + theObject@row_header + theObject@row_symbol
print(misprint_row_ind)
theObject@ind <- append(theObject@ind, values = paste(misprint_row_ind, column_index, sep = "."))
print(theObject@ind)
#c[i] <- values[[a]][b]
print(c[i])
}
}
}
}
return(theObject)
}
)
debugSource('D:/Diploma/r_project/Misprint.R')
source('D:/Diploma/r_project/Misprint.R')
debugSource('D:/Diploma/r_project/Misprint.R')
debugSource('D:/Diploma/r_project/Misprint.R')
debugSource('D:/Diploma/r_project/Misprint.R')
debugSource('D:/Diploma/r_project/Misprint.R')
debugSource('D:/Diploma/r_project/Misprint.R', echo=TRUE)
debugSource('D:/Diploma/r_project/Misprint.R', echo=TRUE)
source('D:/Diploma/r_project/Misprint.R', echo=TRUE)
source('D:/Diploma/r_project/Misprint.R')
misprint <- FindMisprints(misprint, file@table, sex@column_index, sex@key, sex@value)
debugSource('D:/Diploma/r_project/Misprint.R', echo=TRUE)
misprint <- FindMisprints(misprint, file@table, sex@column_index, sex@key, sex@value)
debugSource('D:/Diploma/r_project/Misprint.R', echo=TRUE)
misprint <- FindMisprints(misprint, file@table, sex@column_index, sex@key, sex@value)
debugSource('D:/Diploma/r_project/Misprint.R', echo=TRUE)
debugSource('D:/Diploma/r_project/Misprint.R', echo=TRUE)
debugSource('D:/Diploma/r_project/Misprint.R', echo=TRUE)
source('D:/Diploma/r_project/MissingValue.R', echo=TRUE)
source('D:/Diploma/r_project/Misprint.R', echo=TRUE)
debugSource('D:/Diploma/r_project/Misprint.R', echo=TRUE)
misprint
debugSource('D:/Diploma/r_project/Misprint.R', echo=TRUE)
misprint <- FindMisprints(misprint, file@table, sex@column_index, sex@key, sex@value)
source('D:/Diploma/r_project/Misprint.R', encoding = 'UTF-8', echo=TRUE)
misprint <- FindMisprints(misprint, file@table, sex@column_index, sex@key, sex@value)
misprint
Misprint <- setClass("Misprint",
contains = "Error"
)
setMethod(f = "initialize",
signature = "Misprint",
definition = function(.Object)
{ .Object@style <- "yellow1"
# .Object@style <- CellStyle(wb) +
# Font(wb, isItalic = TRUE) +
# Fill(foregroundColor = "yellow1") +
# Border(position = c("BOTTOM", "LEFT", "TOP", "RIGHT"))
return(.Object)
}
)
setGeneric(name = "FindMisprints",
def = function(theObject, table, column_index, keys, values)
{
standardGeneric("FindMisprints")
}
)
setMethod(f = "FindMisprints",
signature = "Misprint",
definition = function(theObject, table, column_index, keys, values)
{ misprint_row_ind <- 0
c <- table[[column_index]]
for (i in length(c)){
found <- FALSE
for(j in 1:length(values)){
if (toupper(c[i]) == toupper(values[[j]][1])){
#which(toupper(file@table[[2]]) %in% toupper(sex@key[[1]][1]))
print(toupper(c[i]))
print(toupper(values[[j]][1]))
found <- TRUE
}
if (found) next
}
for(a in 1:length(keys)){
for(b in 1:length(keys[j])){
if (toupper(c[i]) == toupper(keys[[a]][b])){
found <- TRUE
misprint_row_ind <-  i + theObject@row_header + theObject@row_symbol
print(misprint_row_ind)
theObject@ind <- append(theObject@ind, values = paste(misprint_row_ind, column_index, sep = "."))
print(theObject@ind)
}
if (!found){
print("Опечатка не распарсена")
}else next
}
}
}
return(theObject)
}
)
misprint <- FindMisprints(misprint, file@table, sex@column_index, sex@key, sex@value)
anna <- TRUE
for (i in 1:10){if (anna) next}
if (anna){ alla <- 4}
alla
debugSource('D:/Diploma/r_project/Misprint.R', encoding = 'UTF-8', echo=TRUE)
