#
#       if (found)
#         next
#
#       for(a in 1:length(keys))
#       {
#         for(b in 1:length(keys[j]))
#         {
#           if (toupper(c[i]) == toupper(keys[[a]][b]))
#           {
#               found <- TRUE
#               #misprint_row_ind <-  i + theObject@row_header + theObject@row_symbol
#               globalMisprint <<- append(globalMisprint, values = paste(i, column_index, sep = "."))
#               cat("Misprints coordinates are ",globalMisprint, "\n")
#               c[i] <- values[[a]][b]
#           }
#           else
#           {
#             globalUnsolvedMisprint <<- append(globalMisprint, values = paste(i, column_index, sep = "."))
#             cat("Unsolved misprint coordinates are", paste(i, column_index, sep = "."), "\n")
#           }
#         }
#       }
#     }
#     return(theObject)
#   }
# )
Misprint <- setClass("Misprint",
contains = "Error"
)
setMethod(f = "initialize",
signature = "Misprint",
definition = function(.Object)
{
.Object@style <- "yellow1"
# .Object@style <- CellStyle(wb) +
# Font(wb, isItalic = TRUE) +
# Fill(foregroundColor = "yellow1") +
# Border(position = c("BOTTOM", "LEFT", "TOP", "RIGHT"))
return(.Object)
}
)
setGeneric(name = "FindMisprints",
def = function(theObject, table, column_index, keys, values)
{
standardGeneric("FindMisprints")
}
)
setMethod(f = "FindMisprints",
signature = "Misprint",
definition = function(theObject, table, column_index, keys, values)
{
misprint_row_ind <- 0
c <- table[[column_index]]
#missing <- as.numeric(missing)
#c <- c[-missing]
for (i in 1:length(c))
{
found <- FALSE
if (is.na(c[i]) == TRUE)
{
globalMissing <<- append(globalMissing, values = paste(i, column_index, sep = "."))
cat("Missing value coordinates are ", paste(i, column_index, sep = "."), "\n")
next
}
for(j in 1:length(values))
{
if (toupper(c[i]) == toupper(values[[j]][1]))
{
#which(toupper(file@table[[2]]) %in% toupper(sex@key[[1]][1]))
found <- TRUE
break
}
}
if (found)
next
for(a in 1:length(keys))
{
if (found)
break
for(b in 1:length(keys[a]))
{
if (toupper(c[i]) == toupper(keys[[a]][b]))
{
found <- TRUE
#misprint_row_ind <-  i + theObject@row_header + theObject@row_symbol
theObject@indices <- append(theObject@indices, values = paste(i, column_index, sep = "."))
cat("Misprints coordinates are ", paste(i, column_index, sep = "."), "\n")
break
}
if ((!found) & (b!=length(keys[a])))
{
globalUnsolvedMisprint <<- append(globalUnsolvedMisprint, values = paste(i, column_index, sep = "."))
cat("Unsolved misprint coordinates are", paste(i, column_index, sep = "."), "\n")
}
}
}
}
return(theObject)
}
)
debugSource('D:/Diploma/r_project/Misprint.R', echo=TRUE)
source('D:/Diploma/r_project/Misprint.R', echo=TRUE)
misprint@indices <- character(0)
globalMissing <- character(0)
globalUnsolvedMisprint <- character(0)
misprint <- FindMisprints(misprint, file@table_in, sex@column_index, sex@key, sex@value)
debugSource('D:/Diploma/r_project/Misprint.R', echo=TRUE)
misprint <- FindMisprints(misprint, file@table_in, sex@column_index, sex@key, sex@value)
globalUnsolvedMisprint <- character(0)
globalMissing <- character(0)
misprint@indices <- character(0)
debugSource('D:/Diploma/r_project/Misprint.R', echo=TRUE)
misprint <- FindMisprints(misprint, file@table_in, sex@column_index, sex@key, sex@value)
debugSource('D:/Diploma/r_project/Misprint.R', echo=TRUE)
misprint <- FindMisprints(misprint, file@table_in, sex@column_index, sex@key, sex@value)
debugSource('D:/Diploma/r_project/Misprint.R', echo=TRUE)
misprint <- FindMisprints(misprint, file@table_in, sex@column_index, sex@key, sex@value)
Misprint <- setClass("Misprint",
contains = "Error"
)
setMethod(f = "initialize",
signature = "Misprint",
definition = function(.Object)
{
.Object@style <- "yellow1"
# .Object@style <- CellStyle(wb) +
# Font(wb, isItalic = TRUE) +
# Fill(foregroundColor = "yellow1") +
# Border(position = c("BOTTOM", "LEFT", "TOP", "RIGHT"))
return(.Object)
}
)
setGeneric(name = "FindMisprints",
def = function(theObject, table, column_index, keys, values)
{
standardGeneric("FindMisprints")
}
)
setMethod(f = "FindMisprints",
signature = "Misprint",
definition = function(theObject, table, column_index, keys, values)
{
#misprint_row_ind <- 0
c <- table[[column_index]]
for (i in 1:length(c))
{
found <- FALSE
if (is.na(c[i]) == TRUE)
{
globalMissing <<- append(globalMissing, values = paste(i, column_index, sep = "."))
cat("Missing value coordinates are ", paste(i, column_index, sep = "."), "\n")
next
}
for(j in 1:length(values))
{
if (toupper(c[i]) == toupper(values[[j]][1]))
{
#which(toupper(file@table[[2]]) %in% toupper(sex@key[[1]][1]))
found <- TRUE
break
}
}
if (found)
next
for(a in 1:length(keys))
{
if (found)
break
for(b in 1:length(keys[a]))
{
if (toupper(c[i]) == toupper(keys[[a]][b]))
{
found <- TRUE
#misprint_row_ind <-  i + theObject@row_header + theObject@row_symbol
theObject@indices <- append(theObject@indices, values = paste(i, column_index, sep = "."))
cat("Misprints coordinates are ", paste(i, column_index, sep = "."), "\n")
break
}
if ((!found) & (b!=length(keys[a])))
{
globalUnsolvedMisprint <<- append(globalUnsolvedMisprint, values = paste(i, column_index, sep = "."))
cat("Unsolved misprint coordinates are", paste(i, column_index, sep = "."), "\n")
}
}
}
}
return(theObject)
}
)
debugSource('D:/Diploma/r_project/Misprint.R', echo=TRUE)
misprint <- FindMisprints(misprint, file@table_in, sex@column_index, sex@key, sex@value)
source('D:/Diploma/r_project/Misprint.R', echo=TRUE)
misprint <- FindMisprints(misprint, file@table_in, sex@column_index, sex@key, sex@value)
source('D:/Diploma/r_project/Misprint.R')
debugSource('D:/Diploma/r_project/Misprint.R', echo=TRUE)
misprint <- FindMisprints(misprint, file@table_in, sex@column_index, sex@key, sex@value)
Misprint <- setClass("Misprint",
contains = "Error"
)
setMethod(f = "initialize",
signature = "Misprint",
definition = function(.Object)
{
.Object@style <- "yellow1"
# .Object@style <- CellStyle(wb) +
# Font(wb, isItalic = TRUE) +
# Fill(foregroundColor = "yellow1") +
# Border(position = c("BOTTOM", "LEFT", "TOP", "RIGHT"))
return(.Object)
}
)
setGeneric(name = "FindMisprints",
def = function(theObject, table, column_index, keys, values)
{
standardGeneric("FindMisprints")
}
)
setMethod(f = "FindMisprints",
signature = "Misprint",
definition = function(theObject, table, column_index, keys, values)
{
#misprint_row_ind <- 0
c <- table[[column_index]]
for (i in 1:length(c))
{
found <- FALSE
if (is.na(c[i]) == TRUE)
{
globalMissing <<- append(globalMissing, values = paste(i, column_index, sep = "."))
cat("Missing value coordinates are ", paste(i, column_index, sep = "."), "\n")
next
}
for(j in 1:length(values))
{
if (toupper(c[i]) == toupper(values[[j]][1]))
{
#which(toupper(file@table[[2]]) %in% toupper(sex@key[[1]][1]))
found <- TRUE
break
}
}
if (found)
next
for(a in 1:length(keys))
{
if (found)
break
for(b in 1:length(keys[a]))
{
if (toupper(c[i]) == toupper(keys[[a]][b]))
{
found <- TRUE
#misprint_row_ind <-  i + theObject@row_header + theObject@row_symbol
theObject@indices <- append(theObject@indices, values = paste(i, column_index, sep = "."))
cat("Misprints coordinates are ", paste(i, column_index, sep = "."), "\n")
break
}
if ((!found) & (b!=length(keys[a])))
{
globalUnsolvedMisprint <<- append(globalUnsolvedMisprint, values = paste(i, column_index, sep = "."))
cat("Unsolved misprint coordinates are", paste(i, column_index, sep = "."), "\n")
}
}
}
}
return(theObject)
}
)
misprint <- FindMisprints(misprint, file@table_in, sex@column_index, sex@key, sex@value)
debugSource('D:/Diploma/r_project/Misprint.R', echo=TRUE)
misprint <- FindMisprints(misprint, file@table_in, sex@column_index, sex@key, sex@value)
debugSource('D:/Diploma/r_project/Misprint.R', echo=TRUE)
Misprint <- setClass("Misprint",
contains = "Error"
)
setMethod(f = "initialize",
signature = "Misprint",
definition = function(.Object)
{
.Object@style <- "yellow1"
# .Object@style <- CellStyle(wb) +
# Font(wb, isItalic = TRUE) +
# Fill(foregroundColor = "yellow1") +
# Border(position = c("BOTTOM", "LEFT", "TOP", "RIGHT"))
return(.Object)
}
)
setGeneric(name = "FindMisprints",
def = function(theObject, table, column_index, keys, values)
{
standardGeneric("FindMisprints")
}
)
setMethod(f = "FindMisprints",
signature = "Misprint",
definition = function(theObject, table, column_index, keys, values)
{
#misprint_row_ind <- 0
c <- table[[column_index]]
for (i in 1:length(c))
{
found <- FALSE
if (is.na(c[i]) == TRUE)
{
globalMissing <<- append(globalMissing, values = paste(i, column_index, sep = "."))
cat("Missing value coordinates are ", paste(i, column_index, sep = "."), "\n")
next
}
for(j in 1:length(values))
{
if (toupper(c[i]) == toupper(values[[j]][1]))
{
#which(toupper(file@table[[2]]) %in% toupper(sex@key[[1]][1]))
found <- TRUE
break
}
}
if (found)
next
for(a in 1:length(keys))
{
if (found)
break
for(b in 1:length(keys[a]))
{
if (toupper(c[i]) == toupper(keys[[a]][b]))
{
found <- TRUE
#misprint_row_ind <-  i + theObject@row_header + theObject@row_symbol
theObject@indices <- append(theObject@indices, values = paste(i, column_index, sep = "."))
cat("Misprints coordinates are ", paste(i, column_index, sep = "."), "\n")
break
}
if ((!found) & (b!=length(keys[a])))
{
globalUnsolvedMisprint <<- append(globalUnsolvedMisprint, values = paste(i, column_index, sep = "."))
cat("Unsolved misprint coordinates are", paste(i, column_index, sep = "."), "\n")
}
}
}
}
return(theObject)
}
)
misprint <- FindMisprints(misprint, file@table_in, sex@column_index, sex@key, sex@value)
source('D:/Diploma/r_project/Misprint.R')
source('D:/Diploma/r_project/Misprint.R')
Misprint <- setClass("Misprint",
contains = "Error"
)
setMethod(f = "initialize",
signature = "Misprint",
definition = function(.Object)
{
.Object@style <- "yellow1"
# .Object@style <- CellStyle(wb) +
# Font(wb, isItalic = TRUE) +
# Fill(foregroundColor = "yellow1") +
# Border(position = c("BOTTOM", "LEFT", "TOP", "RIGHT"))
return(.Object)
}
)
setGeneric(name = "FindMisprints",
def = function(theObject, table, column_index, keys, values)
{
standardGeneric("FindMisprints")
}
)
setMethod(f = "FindMisprints",
signature = "Misprint",
definition = function(theObject, table, column_index, keys, values)
{
#misprint_row_ind <- 0
c <- table[[column_index]]
for (i in 1:length(c))
{
found <- FALSE
if (is.na(c[i]) == TRUE)
{
globalMissing <<- append(globalMissing, values = paste(i, column_index, sep = "."))
cat("Missing value coordinates are ", paste(i, column_index, sep = "."), "\n")
next
}
for(j in 1:length(values))
{
if (toupper(c[i]) == toupper(values[[j]][1]))
{
#which(toupper(file@table[[2]]) %in% toupper(sex@key[[1]][1]))
found <- TRUE
break
}
}
if (found)
next
for(a in 1:length(keys))
{
if (found)
break
for(b in 1:length(keys[a]))
{
if (toupper(c[i]) == toupper(keys[[a]][b]))
{
found <- TRUE
#misprint_row_ind <-  i + theObject@row_header + theObject@row_symbol
theObject@indices <- append(theObject@indices, values = paste(i, column_index, sep = "."))
cat("Misprints coordinates are ", paste(i, column_index, sep = "."), "\n")
break
}
if ((!found) & (b!=length(keys[a])))
{
globalUnsolvedMisprint <<- append(globalUnsolvedMisprint, values = paste(i, column_index, sep = "."))
cat("Unsolved misprint coordinates are", paste(i, column_index, sep = "."), "\n")
}
}
}
}
return(theObject)
}
)
debugSource('D:/Diploma/r_project/Misprint.R', echo=TRUE)
misprint <- FindMisprints(misprint, file@table_in, sex@column_index, sex@key, sex@value)
debugSource('D:/Diploma/r_project/Misprint.R', echo=TRUE)
debugonce(FindMisprints)
misprint <- FindMisprints(misprint, file@table_in, sex@column_index, sex@key, sex@value)
debugonce(FindMisprints)
misprint <- FindMisprints(misprint, file@table_in, sex@column_index, sex@key, sex@value)
debugSource('D:/Diploma/r_project/Misprint.R', echo=TRUE)
misprint <- FindMisprints(misprint, file@table_in, sex@column_index, sex@key, sex@value)
debugSource('D:/Diploma/r_project/Misprint.R', echo=TRUE)
debugSource('D:/Diploma/r_project/Misprint.R', echo=TRUE)
misprint <- FindMisprints(misprint, file@table_in, sex@column_index, sex@key, sex@value)
debug(FindMisprints)
source('D:/Diploma/r_project/Misprint.R', echo=TRUE)
debug(FindMisprints)
misprint <- FindMisprints(misprint, file@table_in, sex@column_index, sex@key, sex@value)
Misprint <- setClass("Misprint",
contains = "Error"
)
setMethod(f = "initialize",
signature = "Misprint",
definition = function(.Object)
{
.Object@style <- "yellow1"
# .Object@style <- CellStyle(wb) +
# Font(wb, isItalic = TRUE) +
# Fill(foregroundColor = "yellow1") +
# Border(position = c("BOTTOM", "LEFT", "TOP", "RIGHT"))
return(.Object)
}
)
setGeneric(name = "FindMisprints",
def = function(theObject, table, column_index, keys, values)
{
standardGeneric("FindMisprints")
}
)
setMethod(f = "FindMisprints",
signature = "Misprint",
definition = function(theObject, table, column_index, keys, values)
{
#misprint_row_ind <- 0
c <- table[[column_index]]
for (i in 1:length(c))
{
found <- FALSE
if (is.na(c[i]) == TRUE)
{
globalMissing <<- append(globalMissing, values = paste(i, column_index, sep = "."))
cat("Missing value coordinates are ", paste(i, column_index, sep = "."), "\n")
next
}
for(j in 1:length(values))
{
if (toupper(c[i]) == toupper(values[[j]][1]))
{
#which(toupper(file@table[[2]]) %in% toupper(sex@key[[1]][1]))
found <- TRUE
break
}
}
if (found)
next
for(a in 1:length(keys))
{
if (found)
break
for(b in 1:length(keys[a]))
{
if (toupper(c[i]) == toupper(keys[[a]][b]))
{
found <- TRUE
#misprint_row_ind <-  i + theObject@row_header + theObject@row_symbol
theObject@indices <- append(theObject@indices, values = paste(i, column_index, sep = "."))
cat("Misprints coordinates are ", paste(i, column_index, sep = "."), "\n")
break
}
if ((!found) & (b!=length(keys[a])))
{
globalUnsolvedMisprint <<- append(globalUnsolvedMisprint, values = paste(i, column_index, sep = "."))
cat("Unsolved misprint coordinates are", paste(i, column_index, sep = "."), "\n")
}
}
}
}
return(theObject)
}
)
debugSource('D:/Diploma/r_project/Misprint.R', echo=TRUE)
debugSource('D:/Diploma/r_project/Misprint.R', echo=TRUE)
debugSource('D:/Diploma/r_project/Misprint.R', echo=TRUE)
debugSource('D:/Diploma/r_project/Misprint.R', echo=TRUE)
