.Object@style <- "yellow1"
# .Object@style <- CellStyle(wb) +
# Font(wb, isItalic = TRUE) +
# Fill(foregroundColor = "yellow1") +
# Border(position = c("BOTTOM", "LEFT", "TOP", "RIGHT"))
return(.Object)
}
)
setGeneric(name = "FindMisprints",
def = function(theObject, table_in, table_out, column_index, keys, values)
{
standardGeneric("FindMisprints")
}
)
setMethod(f = "FindMisprints",
signature = "Misprint",
definition = function(theObject, table_in, table_out, column_index, keys, values)
{
c <- table_in[[column_index]]
for (i in 1:length(c))
{
found <- FALSE
if (is.na(c[i]) == TRUE)
{
globalMissing <<- append(globalMissing, values = paste(i, column_index, sep = "."))
cat("Missing value coordinates are ", paste(i, column_index, sep = "."), "\n")
next
}
for(j in 1:length(values))
{
if (toupper(c[i]) == toupper(values[[j]][1]))
{
#which(toupper(file@table_in[[2]]) %in% toupper(sex@key[[1]][1]))
found <- TRUE
break
}
}
if (found)
next
for(a in 1:length(keys))
{
if (found)
break
for(b in 1:length(keys[[a]]))
{
if (toupper(c[i]) == toupper(keys[[a]][b]))
{
found <- TRUE
globalMisprint <<- append(globalMisprint, values = paste(i, column_index, sep = "."))
cat("Misprints coordinates are ", paste(i, column_index, sep = "."), "\n")
file@table_out[[column_index]][i] <<- unlist(values[[a]], use.names = FALSE)
break
}
}
if ((!found) & (a == length(keys)))
{
globalUnsolvedMisprint <<- append(globalUnsolvedMisprint, values = paste(i, column_index, sep = "."))
cat("Unsolved misprint coordinates are", paste(i, column_index, sep = "."), "\n")
found <- TRUE
}
}
}
return(table_out)
}
)
setGeneric(name = "FindMisprintsForNumeric",
def = function(theObject, table_in, table_out, column_index)
{
standardGeneric("FindMisprintsForNumeric")
}
)
setMethod(f = "FindMisprintsForNumeric",
signature = "Misprint",
definition = function(theObject, table_in, table_out, column_index)
{
c <- table_in[[column_index]]
for (i in 1:length(c))
{
if (is.na(c[i]) == TRUE)
{
globalMissing <<- append(globalMissing, values = paste(i, column_index, sep = "."))
cat("Missing value coordinates are ", paste(i, column_index, sep = "."), "\n")
next
}
if (grepl("\\d", c[[i]]) == FALSE)
{
globalMisprint <<- append(globalMisprint, values = paste(i, column_index, sep = "."))
cat("Misprints coordinates are ", paste(i, column_index, sep = "."), "\n")
next
}
#return(theObject)
}
}
)
file <- Open(file)
globalMissing <- character()
globalMisprint <- character()
globalOutlier <- character()
globalUnsolvedMisprint <- character()
FindErrors(sex)
FindErrors(diabetes)
Diabetes <- setClass("Diabetes",
contains = "Column")
setMethod(f = "initialize",
signature = "Diabetes",
definition = function(.Object)
{ #.Object@data <- column_data
.Object@key["FirstDiabetesType"] <- list(c("1 тип",
"1тип",
"первый"))
.Object@value["FirstDiabetesType"] <- list(1)
.Object@key["SecondDiabetesType"] <- list(c("2 тип",
"2тип",
"второй",
"2"))
.Object@value["SecondDiabetesType"] <- list(0)
.Object@column_index <- 5
return(.Object)
}
)
setGeneric(name = "FindErrors",
def = function(theObject)
{
standardGeneric("FindErrors")
}
)
setMethod(f = "FindErrors",
signature = "Diabetes",
definition = function(theObject)
{
#FindMisprints(file@table_in, theObject@column_index, theObject@key, theObject@value)
FindMisprints(misprint, file@table_in, file@table_out, theObject@column_index, theObject@key, theObject@value)
}
)
FindErrors(diabetes)
Age <- setClass("Age",
contains = "Column"
)
setMethod(f = "initialize",
signature = "Age",
definition = function(.Object)
{
.Object@column_index <- 3
return(.Object)
}
)
setGeneric(name = "FindErrors",
def = function(theObject)
{
standardGeneric("FindErrors")
}
)
setMethod(f = "FindErrors",
signature = "Age",
definition = function(theObject)
{
#FindMisprints(file@table_in, theObject@column_index, theObject@key, theObject@value)
FindMisprintsForNumeric(misprint, file@table_in, file@table_out, theObject@column_index)
FindOutliers(outlier, file@table_in, theObject@column_index)
}
)
FindErrors(age)
View(file@table_out)
#install.packages("xlsx")
require(xlsx)
#file_in <- "D:/Diploma/r_project/data_CABG_PCI_2.csv"
file_in <- "D:/Diploma/r_project/data_GABR_PCI ред..csv"
file_out <- "D:/Diploma/r_project/data_CABG_PCI_2_coloring.xlsx"
sheet_out_name <- "data_CABG_PCI_2"
row_header <- 1
row_symbol <- 1
xlsx.createBook <- function(x, sheetName, file, missing_value = FALSE, mis_ind, outliers = FALSE, outliers_ind, startR = 1){
wb <- createWorkbook(type = "xlsx")
sheet <- createSheet(wb, sheetName)
TABLE_COLNAMES_STYLE <- CellStyle(wb) +
Font(wb, isBold = TRUE) +
Alignment(wrapText = TRUE, horizontal = "ALIGN_CENTER") +
Border(position = c("BOTTOM", "LEFT", "TOP", "RIGHT"))
MISSING_VALUE_STYLE <- CellStyle(wb) +
Font(wb, isItalic = TRUE) +
Fill(foregroundColor = "lightgray") +
Border(position = c("BOTTOM", "LEFT", "TOP", "RIGHT"))
OUTLIERS_STYLE <- CellStyle(wb) +
Font(wb, isItalic = TRUE) +
Fill(foregroundColor = "tomato2") +
Border(position = c("BOTTOM", "LEFT", "TOP", "RIGHT"))
#createRow(sheet, rowIndex = 1)
addDataFrame(x, sheet,  row.names = FALSE, startRow = 2, startColumn = 1, colnamesStyle = TABLE_COLNAMES_STYLE)
rows <- getRows(sheet, rowIndex = 1:nrow(x) + row_header + row_symbol)
cells <- getCells(rows, colIndex = 1:ncol(x))
if (missing_value == TRUE){
lapply(names(cells[mis_ind]), function(i) setCellStyle(cells[[i]], MISSING_VALUE_STYLE))
xlsx.addSymbolTytle(sheet, colIndex = 1, title = "??????????? ????????", titleStyle = MISSING_VALUE_STYLE)
}
if (outliers == TRUE){
print("HELOOOOO")
lapply(names(cells[outliers_ind]), function(i) setCellStyle(cells[[i]], OUTLIERS_STYLE))
xlsx.addSymbolTytle(sheet, colIndex = 2, title = "???????", titleStyle = OUTLIERS_STYLE)
}
autoSizeColumn(sheet, colIndex = c(1:ncol(x)))
# ?????????? ??????/?????? ? 1? ???????
createFreezePane(sheet, rowSplit = 2, colSplit = 2, startRow = 1, startColumn = 1)
saveWorkbook(wb, file)
print("New workbook was created")
}
xlsx.findMissingValue <- function(x){
ind <- which(is.na(x), arr.ind = TRUE, useNames = FALSE)
print(ind)
# ????? ????????? ????????????????? ???? ??? ??????? ??? ?????????, ???????? ? ????.??????? TRUE ?? FALSE
if (is.null(ind) == TRUE) {
xlsx.createBook(x, sheet_out_name, file_out)
} else {
ind[,1] <- ind[,1] + row_header + row_symbol
print("??????????? ????????")
mis_ind <- apply(ind, 1, paste, collapse = ".")
print("??????????? ????????")
print(mis_ind)
xlsx.findOutliers(x, mis_ind)
}
}
xlsx.addSymbolTytle <- function(sheet, colIndex, title, titleStyle){
rows <-getRows(sheet,rowIndex = 1)
sheetTitle <-createCell(rows, colIndex)
setCellValue(sheetTitle[[1,1]], title)
setCellStyle(sheetTitle[[1,1]], titleStyle)
}
xlsx.findOutliers <- function(x, mis_ind){
outliers <- c()
outliers_row_ind <- c()
outliers_ind <- c()
num_levels_defaul <- 5
for (i in 1:ncol(x)){
if (is.numeric(x[[i]]) & length(unique(x[[i]])) > num_levels_defaul){
outliers <- boxplot.stats(x[[i]])$out
if (is.null(outliers) == TRUE) {
xlsx.createBook(x, sheet_out_name, file_out)
} else {
outliers_row_ind <- which(x[[i]] %in% outliers, arr.ind = T, useNames = F)
outliers_row_ind <- outliers_row_ind + row_header + row_symbol
print("???????")
outliers_ind <- append(outliers_ind, values = outer(outliers_row_ind, i, paste, sep = "."))
print("???????")
}
}
}
xlsx.createBook(x, sheet_out_name, file_out, missing_value = TRUE, mis_ind, outliers = TRUE, outliers_ind)
}
source_table <- read.csv2(file_in, na.strings = c("", "NA"), stringsAsFactors = FALSE, check.names = FALSE)
xlsx.findMissingValue(source_table)
#install.packages("xlsx")
require(xlsx)
#file_in <- "D:/Diploma/r_project/data_CABG_PCI_2.csv"
file_in <- "D:/Diploma/r_project/data_GABR_PCI ред..csv"
file_out <- "D:/Diploma/r_project/data_CABG_PCI_2_coloring.xlsx"
sheet_out_name <- "data_CABG_PCI_2"
row_header <- 1
row_symbol <- 1
xlsx.createBook <- function(x, sheetName, file, missing_value = FALSE, mis_ind, outliers = FALSE, outliers_ind, startR = 1){
wb <- createWorkbook(type = "xlsx")
print(str(wb))
sheet <- createSheet(wb, sheetName)
TABLE_COLNAMES_STYLE <- CellStyle(wb) +
Font(wb, isBold = TRUE) +
Alignment(wrapText = TRUE, horizontal = "ALIGN_CENTER") +
Border(position = c("BOTTOM", "LEFT", "TOP", "RIGHT"))
MISSING_VALUE_STYLE <- CellStyle(wb) +
Font(wb, isItalic = TRUE) +
Fill(foregroundColor = "lightgray") +
Border(position = c("BOTTOM", "LEFT", "TOP", "RIGHT"))
OUTLIERS_STYLE <- CellStyle(wb) +
Font(wb, isItalic = TRUE) +
Fill(foregroundColor = "tomato2") +
Border(position = c("BOTTOM", "LEFT", "TOP", "RIGHT"))
createRow(sheet, rowIndex = 1)
addDataFrame(x, sheet,  row.names = FALSE, startRow = 2, startColumn = 1, colnamesStyle = TABLE_COLNAMES_STYLE)
rows <- getRows(sheet, rowIndex = 1:nrow(x) + row_header + row_symbol)
cells <- getCells(rows, colIndex = 1:ncol(x))
if (missing_value == TRUE){
lapply(names(cells[mis_ind]), function(i) setCellStyle(cells[[i]], MISSING_VALUE_STYLE))
xlsx.addSymbolTytle(sheet, colIndex = 1, title = "??????????? ????????", titleStyle = MISSING_VALUE_STYLE)
}
if (outliers == TRUE){
print("HELOOOOO")
lapply(names(cells[outliers_ind]), function(i) setCellStyle(cells[[i]], OUTLIERS_STYLE))
xlsx.addSymbolTytle(sheet, colIndex = 2, title = "???????", titleStyle = OUTLIERS_STYLE)
}
autoSizeColumn(sheet, colIndex = c(1:ncol(x)))
# ?????????? ??????/?????? ? 1? ???????
createFreezePane(sheet, rowSplit = 2, colSplit = 2, startRow = 1, startColumn = 1)
saveWorkbook(wb, file)
print("New workbook was created")
}
xlsx.findMissingValue <- function(x){
ind <- which(is.na(x), arr.ind = TRUE, useNames = FALSE)
print(ind)
# ????? ????????? ????????????????? ???? ??? ??????? ??? ?????????, ???????? ? ????.??????? TRUE ?? FALSE
if (is.null(ind) == TRUE) {
xlsx.createBook(x, sheet_out_name, file_out)
} else {
ind[,1] <- ind[,1] + row_header + row_symbol
print("??????????? ????????")
mis_ind <- apply(ind, 1, paste, collapse = ".")
print("??????????? ????????")
print(mis_ind)
xlsx.findOutliers(x, mis_ind)
}
}
xlsx.addSymbolTytle <- function(sheet, colIndex, title, titleStyle){
rows <-getRows(sheet,rowIndex = 1)
sheetTitle <-createCell(rows, colIndex)
setCellValue(sheetTitle[[1,1]], title)
setCellStyle(sheetTitle[[1,1]], titleStyle)
}
xlsx.findOutliers <- function(x, mis_ind){
outliers <- c()
outliers_row_ind <- c()
outliers_ind <- c()
num_levels_defaul <- 5
for (i in 1:ncol(x)){
if (is.numeric(x[[i]]) & length(unique(x[[i]])) > num_levels_defaul){
outliers <- boxplot.stats(x[[i]])$out
if (is.null(outliers) == TRUE) {
xlsx.createBook(x, sheet_out_name, file_out)
} else {
outliers_row_ind <- which(x[[i]] %in% outliers, arr.ind = T, useNames = F)
outliers_row_ind <- outliers_row_ind + row_header + row_symbol
print("???????")
outliers_ind <- append(outliers_ind, values = outer(outliers_row_ind, i, paste, sep = "."))
print("???????")
}
}
}
xlsx.createBook(x, sheet_out_name, file_out, missing_value = TRUE, mis_ind, outliers = TRUE, outliers_ind)
}
source_table <- read.csv2(file_in, na.strings = c("", "NA"), stringsAsFactors = FALSE, check.names = FALSE)
xlsx.findMissingValue(source_table)
#install.packages("xlsx")
require(xlsx)
file_in <- "D:/Diploma/r_project/data_CABG_PCI_2.csv"
#file_in <- "D:/Diploma/r_project/data_GABR_PCI ред..csv"
file_out <- "D:/Diploma/r_project/data_CABG_PCI_2_coloring.xlsx"
sheet_out_name <- "data_CABG_PCI_2"
row_header <- 1
row_symbol <- 1
xlsx.createBook <- function(x, sheetName, file, missing_value = FALSE, mis_ind, outliers = FALSE, outliers_ind, startR = 1){
wb <- createWorkbook(type = "xlsx")
print(str(wb))
sheet <- createSheet(wb, sheetName)
print
TABLE_COLNAMES_STYLE <- CellStyle(wb) +
Font(wb, isBold = TRUE) +
Alignment(wrapText = TRUE, horizontal = "ALIGN_CENTER") +
Border(position = c("BOTTOM", "LEFT", "TOP", "RIGHT"))
MISSING_VALUE_STYLE <- CellStyle(wb) +
Font(wb, isItalic = TRUE) +
Fill(foregroundColor = "lightgray") +
Border(position = c("BOTTOM", "LEFT", "TOP", "RIGHT"))
OUTLIERS_STYLE <- CellStyle(wb) +
Font(wb, isItalic = TRUE) +
Fill(foregroundColor = "tomato2") +
Border(position = c("BOTTOM", "LEFT", "TOP", "RIGHT"))
createRow(sheet, rowIndex = 1)
addDataFrame(x, sheet,  row.names = FALSE, startRow = 2, startColumn = 1, colnamesStyle = TABLE_COLNAMES_STYLE)
rows <- getRows(sheet, rowIndex = 1:nrow(x) + row_header + row_symbol)
cells <- getCells(rows, colIndex = 1:ncol(x))
if (missing_value == TRUE){
lapply(names(cells[mis_ind]), function(i) setCellStyle(cells[[i]], MISSING_VALUE_STYLE))
xlsx.addSymbolTytle(sheet, colIndex = 1, title = "??????????? ????????", titleStyle = MISSING_VALUE_STYLE)
}
if (outliers == TRUE){
print("HELOOOOO")
lapply(names(cells[outliers_ind]), function(i) setCellStyle(cells[[i]], OUTLIERS_STYLE))
xlsx.addSymbolTytle(sheet, colIndex = 2, title = "???????", titleStyle = OUTLIERS_STYLE)
}
autoSizeColumn(sheet, colIndex = c(1:ncol(x)))
# ?????????? ??????/?????? ? 1? ???????
createFreezePane(sheet, rowSplit = 2, colSplit = 2, startRow = 1, startColumn = 1)
saveWorkbook(wb, file)
print("New workbook was created")
}
xlsx.findMissingValue <- function(x){
ind <- which(is.na(x), arr.ind = TRUE, useNames = FALSE)
print(ind)
# ????? ????????? ????????????????? ???? ??? ??????? ??? ?????????, ???????? ? ????.??????? TRUE ?? FALSE
if (is.null(ind) == TRUE) {
xlsx.createBook(x, sheet_out_name, file_out)
} else {
ind[,1] <- ind[,1] + row_header + row_symbol
print("??????????? ????????")
mis_ind <- apply(ind, 1, paste, collapse = ".")
print("??????????? ????????")
print(mis_ind)
xlsx.findOutliers(x, mis_ind)
}
}
xlsx.addSymbolTytle <- function(sheet, colIndex, title, titleStyle){
rows <-getRows(sheet,rowIndex = 1)
sheetTitle <-createCell(rows, colIndex)
setCellValue(sheetTitle[[1,1]], title)
setCellStyle(sheetTitle[[1,1]], titleStyle)
}
xlsx.findOutliers <- function(x, mis_ind){
outliers <- c()
outliers_row_ind <- c()
outliers_ind <- c()
num_levels_defaul <- 5
for (i in 1:ncol(x)){
if (is.numeric(x[[i]]) & length(unique(x[[i]])) > num_levels_defaul){
outliers <- boxplot.stats(x[[i]])$out
if (is.null(outliers) == TRUE) {
xlsx.createBook(x, sheet_out_name, file_out)
} else {
outliers_row_ind <- which(x[[i]] %in% outliers, arr.ind = T, useNames = F)
outliers_row_ind <- outliers_row_ind + row_header + row_symbol
print("???????")
outliers_ind <- append(outliers_ind, values = outer(outliers_row_ind, i, paste, sep = "."))
print("???????")
}
}
}
xlsx.createBook(x, sheet_out_name, file_out, missing_value = TRUE, mis_ind, outliers = TRUE, outliers_ind)
}
source_table <- read.csv2(file_in, na.strings = c("", "NA"), stringsAsFactors = FALSE, check.names = FALSE)
xlsx.findMissingValue(source_table)
#install.packages("xlsx")
require(xlsx)
file_in <- "D:/Diploma/r_project/data_CABG_PCI_2.csv"
#file_in <- "D:/Diploma/r_project/data_GABR_PCI ред..csv"
file_out <- "D:/Diploma/r_project/data_CABG_PCI_2_coloring.xlsx"
sheet_out_name <- "data_CABG_PCI_2"
row_header <- 1
row_symbol <- 1
xlsx.createBook <- function(x, sheetName, file, missing_value = FALSE, mis_ind, outliers = FALSE, outliers_ind, startR = 1){
wb <- createWorkbook(type = "xlsx")
print(str(wb))
sheet <- createSheet(wb, sheetName)
print(str(sheet))
TABLE_COLNAMES_STYLE <- CellStyle(wb) +
Font(wb, isBold = TRUE) +
Alignment(wrapText = TRUE, horizontal = "ALIGN_CENTER") +
Border(position = c("BOTTOM", "LEFT", "TOP", "RIGHT"))
MISSING_VALUE_STYLE <- CellStyle(wb) +
Font(wb, isItalic = TRUE) +
Fill(foregroundColor = "lightgray") +
Border(position = c("BOTTOM", "LEFT", "TOP", "RIGHT"))
OUTLIERS_STYLE <- CellStyle(wb) +
Font(wb, isItalic = TRUE) +
Fill(foregroundColor = "tomato2") +
Border(position = c("BOTTOM", "LEFT", "TOP", "RIGHT"))
createRow(sheet, rowIndex = 1)
addDataFrame(x, sheet,  row.names = FALSE, startRow = 2, startColumn = 1, colnamesStyle = TABLE_COLNAMES_STYLE)
rows <- getRows(sheet, rowIndex = 1:nrow(x) + row_header + row_symbol)
cells <- getCells(rows, colIndex = 1:ncol(x))
if (missing_value == TRUE){
lapply(names(cells[mis_ind]), function(i) setCellStyle(cells[[i]], MISSING_VALUE_STYLE))
xlsx.addSymbolTytle(sheet, colIndex = 1, title = "??????????? ????????", titleStyle = MISSING_VALUE_STYLE)
}
if (outliers == TRUE){
print("HELOOOOO")
lapply(names(cells[outliers_ind]), function(i) setCellStyle(cells[[i]], OUTLIERS_STYLE))
xlsx.addSymbolTytle(sheet, colIndex = 2, title = "???????", titleStyle = OUTLIERS_STYLE)
}
autoSizeColumn(sheet, colIndex = c(1:ncol(x)))
# ?????????? ??????/?????? ? 1? ???????
createFreezePane(sheet, rowSplit = 2, colSplit = 2, startRow = 1, startColumn = 1)
saveWorkbook(wb, file)
print("New workbook was created")
}
xlsx.findMissingValue <- function(x){
ind <- which(is.na(x), arr.ind = TRUE, useNames = FALSE)
print(ind)
# ????? ????????? ????????????????? ???? ??? ??????? ??? ?????????, ???????? ? ????.??????? TRUE ?? FALSE
if (is.null(ind) == TRUE) {
xlsx.createBook(x, sheet_out_name, file_out)
} else {
ind[,1] <- ind[,1] + row_header + row_symbol
print("??????????? ????????")
mis_ind <- apply(ind, 1, paste, collapse = ".")
print("??????????? ????????")
print(mis_ind)
xlsx.findOutliers(x, mis_ind)
}
}
xlsx.addSymbolTytle <- function(sheet, colIndex, title, titleStyle){
rows <-getRows(sheet,rowIndex = 1)
sheetTitle <-createCell(rows, colIndex)
setCellValue(sheetTitle[[1,1]], title)
setCellStyle(sheetTitle[[1,1]], titleStyle)
}
xlsx.findOutliers <- function(x, mis_ind){
outliers <- c()
outliers_row_ind <- c()
outliers_ind <- c()
num_levels_defaul <- 5
for (i in 1:ncol(x)){
if (is.numeric(x[[i]]) & length(unique(x[[i]])) > num_levels_defaul){
outliers <- boxplot.stats(x[[i]])$out
if (is.null(outliers) == TRUE) {
xlsx.createBook(x, sheet_out_name, file_out)
} else {
outliers_row_ind <- which(x[[i]] %in% outliers, arr.ind = T, useNames = F)
outliers_row_ind <- outliers_row_ind + row_header + row_symbol
print("???????")
outliers_ind <- append(outliers_ind, values = outer(outliers_row_ind, i, paste, sep = "."))
print("???????")
}
}
}
xlsx.createBook(x, sheet_out_name, file_out, missing_value = TRUE, mis_ind, outliers = TRUE, outliers_ind)
}
source_table <- read.csv2(file_in, na.strings = c("", "NA"), stringsAsFactors = FALSE, check.names = FALSE)
xlsx.findMissingValue(source_table)
