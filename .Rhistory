misprint <- result_list$misprint
missingValue <- result_list$missingValues
unsolvedMisprint <- result_list$unsolvedMisprint
file_out <- result_list$file
#26
source("D:/Diploma/r_project/Continuous.R")
artificialCirculationTime <- new("Continuous")
artificialCirculationTime <- setColumnIndex(artificialCirculationTime, 26)
result_list <- FindErrors(artificialCirculationTime, file_in, file_out, file_report, misprint, missingValue, unsolvedMisprint, outlier)
misprint <- result_list$misprint
missingValue <- result_list$missingValues
unsolvedMisprint <- result_list$unsolvedMisprint
outlier <- result_list$outliers
file_out <- result_list$file
#27
source("D:/Diploma/r_project/Continuous.R")
peakPressureGradientRepeat <- new("Continuous")
peakPressureGradientRepeat <- setColumnIndex(peakPressureGradientRepeat, 27)
result_list <- FindErrors(peakPressureGradientRepeat, file_in, file_out, file_report, misprint, missingValue, unsolvedMisprint, outlier)
misprint <- result_list$misprint
missingValue <- result_list$missingValues
unsolvedMisprint <- result_list$unsolvedMisprint
outlier <- result_list$outliers
file_out <- result_list$file
#28
source("D:/Diploma/r_project/Continuous.R")
averagePressureGradientRepeat <- new("Continuous")
averagePressureGradientRepeat <- setColumnIndex(averagePressureGradientRepeat, 28)
result_list <- FindErrors(averagePressureGradientRepeat, file_in, file_out, file_report, misprint, missingValue, unsolvedMisprint, outlier)
misprint <- result_list$misprint
missingValue <- result_list$missingValues
unsolvedMisprint <- result_list$unsolvedMisprint
outlier <- result_list$outliers
file_out <- result_list$file
#29
source("D:/Diploma/r_project/Discrete.R")
aorticRegurgitationRepeat <- new("Discrete")
aorticRegurgitationRepeat <- setColumnIndex(aorticRegurgitationRepeat, 29)
aorticRegurgitationRepeat <- setValue(aorticRegurgitationRepeat, c(0, 1, 2))
result_list <- FindErrors(aorticRegurgitationRepeat, file_in, file_out, file_report, misprint, missingValue, unsolvedMisprint)
misprint <- result_list$misprint
missingValue <- result_list$missingValues
unsolvedMisprint <- result_list$unsolvedMisprint
file_out <- result_list$file
#30
source("D:/Diploma/r_project/Discrete.R")
mitralRegurgitationRepeat <- new("Discrete")
mitralRegurgitationRepeat <- setColumnIndex(mitralRegurgitationRepeat, 30)
mitralRegurgitationRepeat <- setValue(mitralRegurgitationRepeat, c(0, 1, 2))
result_list <- FindErrors(mitralRegurgitationRepeat, file_in, file_out, file_report, misprint, missingValue, unsolvedMisprint)
misprint <- result_list$misprint
missingValue <- result_list$missingValues
unsolvedMisprint <- result_list$unsolvedMisprint
file_out <- result_list$file
#31
source("D:/Diploma/r_project/Discrete.R")
source("D:/Diploma/r_project/Binary.R")
rhythmDisturbances <- new("Binary")
rhythmDisturbances <- setColumnIndex(rhythmDisturbances, 31)
result_list <- FindErrors(rhythmDisturbances, file_in, file_out, file_report, misprint, missingValue, unsolvedMisprint)
misprint <- result_list$misprint
missingValue <- result_list$missingValues
unsolvedMisprint <- result_list$unsolvedMisprint
file_out <- result_list$file
#32
source("D:/Diploma/r_project/Discrete.R")
source("D:/Diploma/r_project/Binary.R")
acuteMyocardialInfarction <- new("Binary")
acuteMyocardialInfarction <- setColumnIndex(acuteMyocardialInfarction, 32)
result_list <- FindErrors(acuteMyocardialInfarction, file_in, file_out, file_report, misprint, missingValue, unsolvedMisprint)
misprint <- result_list$misprint
missingValue <- result_list$missingValues
unsolvedMisprint <- result_list$unsolvedMisprint
file_out <- result_list$file
#33
source("D:/Diploma/r_project/Discrete.R")
source("D:/Diploma/r_project/Binary.R")
repeatedRevascularization <- new("Binary")
repeatedRevascularization <- setColumnIndex(repeatedRevascularization, 33)
result_list <- FindErrors(repeatedRevascularization, file_in, file_out, file_report, misprint, missingValue, unsolvedMisprint)
misprint <- result_list$misprint
missingValue <- result_list$missingValues
unsolvedMisprint <- result_list$unsolvedMisprint
file_out <- result_list$file
#34
source("D:/Diploma/r_project/Discrete.R")
source("D:/Diploma/r_project/Binary.R")
adcc <- new("Binary")
adcc <- setColumnIndex(adcc, 34)
result_list <- FindErrors(adcc, file_in, file_out, file_report, misprint, missingValue, unsolvedMisprint)
misprint <- result_list$misprint
missingValue <- result_list$missingValues
unsolvedMisprint <- result_list$unsolvedMisprint
file_out <- result_list$file
#35
source("D:/Diploma/r_project/Discrete.R")
source("D:/Diploma/r_project/Binary.R")
death <- new("Binary")
death <- setColumnIndex(death, 35)
death <- setKey(death,
list(c("ок",
"нет"),
c("лет",
"2",
"да")),
add = FALSE)
result_list <- FindErrors(death, file_in, file_out, file_report, misprint, missingValue, unsolvedMisprint)
misprint <- result_list$misprint
missingValue <- result_list$missingValues
unsolvedMisprint <- result_list$unsolvedMisprint
file_out <- result_list$file
#36
source("D:/Diploma/r_project/Discrete.R")
source("D:/Diploma/r_project/Binary.R")
masse <- new("Binary")
masse <- setColumnIndex(masse, 36)
result_list <- FindErrors(masse, file_in, file_out, file_report, misprint, missingValue, unsolvedMisprint)
misprint <- result_list$misprint
missingValue <- result_list$missingValues
unsolvedMisprint <- result_list$unsolvedMisprint
file_out <- result_list$file
#37
source("D:/Diploma/r_project/Discrete.R")
source("D:/Diploma/r_project/Binary.R")
acuteKidneyInjury <- new("Binary")
acuteKidneyInjury <- setColumnIndex(masse, 37)
result_list <- FindErrors(acuteKidneyInjury, file_in, file_out, file_report, misprint, missingValue, unsolvedMisprint)
misprint <- result_list$misprint
missingValue <- result_list$missingValues
unsolvedMisprint <- result_list$unsolvedMisprint
file_out <- result_list$file
#38
source("D:/Diploma/r_project/Discrete.R")
source("D:/Diploma/r_project/Binary.R")
bleeding <- new("Binary")
bleeding <- setColumnIndex(bleeding, 38)
result_list <- FindErrors(bleeding, file_in, file_out, file_report, misprint, missingValue, unsolvedMisprint)
misprint <- result_list$misprint
missingValue <- result_list$missingValues
unsolvedMisprint <- result_list$unsolvedMisprint
file_out <- result_list$file
#39 Discrete or Continuous
#source("D:/Diploma/r_project/Error.R")
source("D:/Diploma/r_project/Discrete.R")
shuntsNumber <- new("Discrete")
shuntsNumber <- setColumnIndex(shuntsNumber, 39)
shuntsNumber <- setValue(shuntsNumber, c(0, 1, 2, 3))
result_list <- FindErrors(shuntsNumber, file_in, file_out, file_report, misprint, missingValue, unsolvedMisprint)
misprint <- result_list$misprint
missingValue <- result_list$missingValues
unsolvedMisprint <- result_list$unsolvedMisprint
file_out <- result_list$file
#40
source("D:/Diploma/r_project/Discrete.R")
source("D:/Diploma/r_project/Binary.R")
stentType <- new("Binary")
stentType <- setColumnIndex(stentType, 40)
stentType <- setValue(stentType, c("bms", "des"))
result_list <- FindErrors(stentType, file_in, file_out, file_report, misprint, missingValue, unsolvedMisprint)
misprint <- result_list$misprint
missingValue <- result_list$missingValues
unsolvedMisprint <- result_list$unsolvedMisprint
file_out <- result_list$file
#41
source("D:/Diploma/r_project/Discrete.R")
source("D:/Diploma/r_project/Binary.R")
revascularization <- new("Binary")
revascularization <- setColumnIndex(revascularization, 41)
result_list <- FindErrors(revascularization, file_in, file_out, file_report, misprint, missingValue, unsolvedMisprint)
misprint <- result_list$misprint
missingValue <- result_list$missingValues
unsolvedMisprint <- result_list$unsolvedMisprint
file_out <- result_list$file
#42 date
source("D:/Diploma/r_project/Dates.R")
dischargeDate <- new("Dates")
dischargeDate <- setColumnIndex(dischargeDate, 42)
result_list <- FindErrors(dischargeDate, file_in, file_out, file_report, misprint, missingValue, unsolvedMisprint)
misprint <- result_list$misprint
missingValue <- result_list$missingValues
unsolvedMisprint <- result_list$unsolvedMisprint
file <- result_list$file
dateMisprint<- FindDateMisprints(dateMisprint, dischargeDate, interventionDate, file_out, file_report)
CloseFileReport(file_report)
file_out <- CreateExcelWB(file_out, startRow = 2)
#missingValue@indices <- globalMissing
SetColor(missingValue, file_out)
#misprint@indices <- globalMisprint
SetColor(misprint, file_out)
#unsolvedMisprint@indices <- globalUnsolvedMisprint
SetColor(unsolvedMisprint, file_out)
#outlier@indices <- globalOutlier
SetColor(outlier, file_out)
SetColor(dateMisprint, file_out)
file_out <- SaveExcelWB(file_out, freeze = TRUE)
source("D:/Diploma/r_project/SummaryTableFile.R")
sum <- new("SummaryTableFile")
sum <- setFilePath(sum, "D:/Diploma/r_project/sum.xlsx")
sum <- setExcelSheetName(sum, "sum")
sum <- ColumnsValuesSummaryTable(sum, file_in, only = 10)
# which(sapply(as.Date(file@table_in[[42]], format = "%d.%m.%Y"), is.date), arr.ind = TRUE, useNames = FALSE)
View(file_in@table_in)
debugSource('D:/Diploma/r_project/Misprint.R', echo=TRUE)
source('D:/Diploma/r_project/Misprint.R', echo=TRUE)
save.image("D:/Diploma/r_project/.RData")
debugSource('D:/Diploma/r_project/Misprint.R', echo=TRUE)
FindMisprints(misprint, missingValue, unsolvedMisprint, file_in, file_out, file_report, interventionDate)
source('D:/Diploma/r_project/Misprint.R', echo=TRUE)
FindMisprints(misprint, missingValue, unsolvedMisprint, file_in, file_out, file_report, interventionDate)
close(file_report)
close(file_report@file)
isOpen()
isOpen(file_report@file)
on.exit()
isOpen(file_report@file)
Error <- setClass("Error",
slots = c(indices = "character",
style = "character",
title = "character",
col_index_legend = "numeric")
)
setGeneric(name = "SetColor",
def = function(theObject, myfile_out)
{
standardGeneric("SetColor")
}
)
setMethod(f = "SetColor",
signature = "Error",
definition = function(theObject, myfile_out)
{
#!!!!!!!!!!!!!!
cat(sprintf("Attention! The painting of the %s is in progress, please wait.", tolower(class(theObject)[1])))
MISSING_VALUE_STYLE <- CellStyle(myfile_out@wb) +
Font(myfile_out@wb, isItalic = TRUE) +
Fill(foregroundColor = "gray70") +
Border(position = c("BOTTOM", "LEFT", "TOP", "RIGHT"))
MISPRINT_STYLE <- CellStyle(myfile_out@wb) +
Font(myfile_out@wb, isItalic = TRUE) +
Fill(foregroundColor = "gold1") +
Border(position = c("BOTTOM", "LEFT", "TOP", "RIGHT"))
UNSOLVED_MISPRINT_STYLE <- CellStyle(myfile_out@wb) +
Font(myfile_out@wb, isItalic = TRUE) +
Fill(foregroundColor = "darkorange") +
Border(position = c("BOTTOM", "LEFT", "TOP", "RIGHT"))
OUTLIERS_STYLE <- CellStyle(myfile_out@wb) +
Font(myfile_out@wb, isItalic = TRUE) +
Fill(foregroundColor = "firebrick1") +
Border(position = c("BOTTOM", "LEFT", "TOP", "RIGHT"))
DATE_MISPRINT_STYLE <- CellStyle(myfile_out@wb) +
Font(myfile_out@wb, isItalic = TRUE) +
Fill(foregroundColor = "lightpink4") +
Border(position = c("BOTTOM", "LEFT", "TOP", "RIGHT"))
style <- switch(theObject@style,
"missing_value"= MISSING_VALUE_STYLE,
"misprint"= MISPRINT_STYLE,
"unsolved_misprint"= UNSOLVED_MISPRINT_STYLE,
"outlier"= OUTLIERS_STYLE,
"dateMisprint" = DATE_MISPRINT_STYLE)
rows <- getRows(myfile_out@sheet, rowIndex = 1:nrow(myfile_out@table_out) + myfile_out@row_header + myfile_out@row_table_legend)
cells <- getCells(rows, colIndex = 1:ncol(myfile_out@table_out))
lapply(names(cells[theObject@indices]), function(i) setCellStyle(cells[[i]], style))
AddTableLegend(theObject, myfile_out, style)
#return(myfile_out)
}
)
setGeneric(name = "AddTableLegend",
def = function(theObject, myfile_out, style)
{
standardGeneric("AddTableLegend")
}
)
setMethod(f = "AddTableLegend",
signature = "Error",
definition = function(theObject, myfile_out, style)
{
rows <- getRows(myfile_out@sheet,rowIndex = 1)
sheetTitle <- createCell(rows, theObject@col_index_legend)
setCellValue(sheetTitle[[1,1]], theObject@title)
setCellStyle(sheetTitle[[1,1]], style)
#return(theObject)
}
)
setGeneric(name = "PrintReport",
def = function(theObject, myfile_report, row_index, col_index, col_name)
{
standardGeneric("PrintReport")
}
)
setMethod(f = "PrintReport",
signature = "Error",
definition = function(theObject, myfile_report, row_index, col_index, col_name)
{
cat(c(class(theObject)[1], "in", "row", row_index, "in", "column", col_name, col_index, "\n"), file = myfile_report@file, append = T)
#cat("It is impossible to determine outliers, there are  unsolved misprints in the column ", col_index, "\n")
}
)
colnames(file_in@table_in)
colnames(file_in@table_in[[2]])
colnames(file_in@table_in[2])
names(file_in@table_in[[2]])
names(file_in@table_in[2])
file_in@table_in[[2]]
Misprint <- setClass("Misprint",
contains = "Error"
)
setMethod(f = "initialize",
signature = "Misprint",
definition = function(.Object)
{
.Object@title <- c("Исправления")
.Object@col_index_legend <- 2
.Object@style<- c("misprint")
return(.Object)
}
)
setGeneric(name = "FindMisprints",
def = function(theObject, missing_values, unsolved_misprints,  myfile_in, myfile_out, myfile_report, column_class)
{
standardGeneric("FindMisprints")
}
)
setMethod(f = "FindMisprints",
signature = c("Misprint", "MissingValue", "UnsolvedMisprint", "FileIn", "FileOut", "FileReport", "Discrete"),
definition = function(theObject, missing_values, unsolved_misprints,  myfile_in, myfile_out, myfile_report, column_class)
{
c <- myfile_in@table_in[[column_class@column_index]]
misprints_row_ind <- c()
for (i in 1:length(c))
{
found <- FALSE
if (is.na(c[i]) == TRUE)
{
misprints_row_ind <- i + myfile_out@row_header + myfile_out@row_table_legend
#!!!!!!
missing_values@indices <- append(missing_values@indices, values = paste(misprints_row_ind, column_class@column_index, sep = "."))
#!!!!!!!
PrintReport(missing_values, myfile_report, misprints_row_ind, column_class@column_index, colnames(myfile_in@table_in[column_class@column_index]) )
cat("Missing value coordinates are ", paste(i, column_class@column_index, sep = "."), "\n")
next
}
for(j in 1:length(column_class@value))
{
if (found)
break
for(k in 1:length(column_class@value[[j]]))
{
if (toupper(c[i]) == toupper(column_class@value[[j]][k]))
{
found <- TRUE
break
}
}
}
if (found)
next
if (length(column_class@key) != 0)
{
for(a in 1:length(column_class@key))
{
if (found)
break
for(b in 1:length(column_class@key[[a]]))
{
if (toupper(c[i]) == toupper(column_class@key[[a]][b]))
{
found <- TRUE
misprints_row_ind <- i + myfile_out@row_header + myfile_out@row_table_legend
#!!!!!!!
theObject@indices <- append(theObject@indices, values = paste(misprints_row_ind, column_class@column_index, sep = "."))
PrintReport(theObject, myfile_report, misprints_row_ind, column_class@column_index)
cat("Misprints coordinates are ", paste(i, column_class@column_index, sep = "."), "\n")
#!!!!!
myfile_out@table_out[[column_class@column_index]][i] <- unlist(column_class@value[[a]], use.names = FALSE)
break
}
}
if ((!found) & (a == length(column_class@key)))
{
misprints_row_ind <- i + myfile_out@row_header + myfile_out@row_table_legend
#!!!!!!
unsolved_misprints@indices <- append(unsolved_misprints@indices, values = paste(misprints_row_ind, column_class@column_index, sep = "."))
#!!!!
PrintReport(unsolved_misprints, myfile_report, misprints_row_ind, column_class@column_index)
cat("Unsolved misprint coordinates are", paste(i, column_class@column_index, sep = "."), "\n")
found <- TRUE
}
}
}
if (!found)
{
misprints_row_ind <- i + myfile_out@row_header + myfile_out@row_table_legend
#!!!!!!
unsolved_misprints@indices <- append(unsolved_misprints@indices, values = paste(misprints_row_ind, column_class@column_index, sep = "."))
#!!!!!!
PrintReport(unsolved_misprints, myfile_report, misprints_row_ind, column_class@column_index)
cat("Unsolved misprint coordinates are", paste(i, column_class@column_index, sep = "."), "\n")
found <- TRUE
}
}
output_list <- list("misprint" = theObject, "missingValues" = missing_values , "unsolvedMisprint" = unsolved_misprints, "file" = myfile_out)
return(output_list)
}
)
# setGeneric(name = "FindMisprints",
#            def = function(theObject, myfile, column_class)
#            {
#              standardGeneric("FindMisprints")
#            }
# )
setMethod(f = "FindMisprints",
signature = c("Misprint", "MissingValue", "UnsolvedMisprint", "FileIn", "FileOut", "FileReport", "Continuous"),
definition = function(theObject, missing_values, unsolved_misprints, myfile_in, myfile_out, myfile_report, column_class)
{
misprints_row_ind <- c()
unsolved_number <- 0
c <- myfile_in@table_in[[column_class@column_index]]
pattern <- "^((\\d)+)[,.]|([[:space:]])?(\\d)+)?$"
for (i in 1:length(c))
{
if (is.na(c[i]) == TRUE)
{
misprints_row_ind <- i + myfile_out@row_header + myfile_out@row_table_legend
#!!!!
missing_values@indices <- append(missing_values@indices, values = paste(misprints_row_ind, column_class@column_index, sep = "."))
#!!!!!
PrintReport(missing_values, myfile_report, misprints_row_ind, column_class@column_index)
cat("Missing value coordinates are ", paste(i, column_class@column_index, sep = "."), "\n")
next
}
if (grepl(pattern, c[[i]]) == FALSE)
{
misprints_row_ind <- i + myfile_out@row_header + myfile_out@row_table_legend
unsolved_misprints@indices <- append(unsolved_misprints@indices, values = paste(misprints_row_ind, column_class@column_index, sep = "."))
PrintReport(unsolved_misprints, myfile_report, misprints_row_ind, column_class@column_index)
cat("Unsolved misprint coordinates are ", paste(i, column_class@column_index, sep = "."), "\n")
unsolved_number <- unsolved_number + 1
next
} else if (grepl("[[:space:]]", c[[i]]) == TRUE)
{
misprints_row_ind <- i + myfile_out@row_header + myfile_out@row_table_legend
theObject@indices <- append(theObject@indices, values = paste(misprints_row_ind, column_class@column_index, sep = "."))
PrintReport(theObject, myfile_report, misprints_row_ind, column_class@column_index)
cat("Misprints coordinates are ", paste(i, column_class@column_index, sep = "."), "\n")
myfile_out@table_out[[column_class@column_index]][i] <- gsub("[[:space:]]", "", myfile_in@table_in[[column_class@column_index]][i])
} else if (is.character(c[[i]]) && (grepl("[.]", c[[i]]) == TRUE))
{
misprints_row_ind <- i + myfile_out@row_header + myfile_out@row_table_legend
theObject@indices <- append(theObject@indices, values = paste(misprints_row_ind, column_class@column_index, sep = "."))
PrintReport(theObject, myfile_report, misprints_row_ind, column_class@column_index)
cat("Misprints coordinates are ", paste(i, column_class@column_index, sep = "."), "\n")
myfile_out@table_out[[column_class@column_index]][i] <- gsub("[.]", ",", myfile_in@table_in[[column_class@column_index]][i])
}
# if (unsolved_number == 0)
#   file@table_out[[column_class@column_index]][i] <<- as.numeric(file@table_out[[column_class@column_index]][i])
}
output_list <- list("misprint" = theObject, "missingValues" = missing_values , "unsolvedMisprint" = unsolved_misprints, "file" = myfile_out, "unsolved_number" = unsolved_number)
return(output_list)
}
)
# # setGeneric(name = "FindMisprints",
# #   def = function(theObject, myfile, column_class)
# #   {
# #     standardGeneric("FindMisprints")
# #   }
# # )
setMethod(f = "FindMisprints",
signature = c("Misprint", "MissingValue", "UnsolvedMisprint", "FileIn", "FileOut", "FileReport", "Dates"),
definition = function(theObject, missing_values, unsolved_misprints, myfile_in, myfile_out, myfile_report, column_class)
{
misprints_row_ind <- c()
c <- myfile_in@table_in[[column_class@column_index]]
pattern <- "^((\\d){2})([,.]|[-/])(\\d{2})([,.]|[-/])((\\d){2}|(\\d){4})$"
for (i in 1:length(c))
{
if (is.na(c[i]) == TRUE)
{
misprints_row_ind <- i + myfile_out@row_header + myfile_out@row_table_legend
#!!!!
missing_values@indices <- append(missing_values@indices, values = paste(misprints_row_ind, column_class@column_index, sep = "."))
#!!!!
PrintReport(missing_values, myfile_report, misprints_row_ind, column_class@column_index)
cat("Missing value coordinates are ", paste(i, column_class@column_index, sep = "."), "\n")
next
}
if (grepl(pattern, c[[i]]) == FALSE)
{
misprints_row_ind <- i + myfile_out@row_header + myfile_out@row_table_legend
#!!!!!
unsolved_misprints@indices <- append(unsolved_misprints@indices, values = paste(misprints_row_ind, column_class@column_index, sep = "."))
#!!!!!
PrintReport(unsolved_misprints, myfile_report, misprints_row_ind, column_class@column_index)
cat("Unsolved misprint coordinates are ", paste(i, column_class@column_index, sep = "."), "\n")
next
} else if (grepl("[,]|[-/]", c[[i]]) == TRUE)
{
misprints_row_ind <- i + myfile_out@row_header + myfile_out@row_table_legend
#!!!!!
theObject@indices <- append(theObject@indices, values = paste(misprints_row_ind, column_class@column_index, sep = "."))
#!!!!!
PrintReport(theObject, myfile_report, misprints_row_ind, column_class@column_index)
cat("Misprints coordinates are ", paste(i, column_class@column_index, sep = "."), "\n")
#!!!!
myfile_out@table_out[[column_class@column_index]][i] <- gsub("[,]|[-/]", ".", myfile_in@table_in[[column_class@column_index]][i])
}
}
output_list <- list("misprint" = theObject, "missingValues" = missing_values , "unsolvedMisprint" = unsolved_misprints, "file" = myfile_out)
return(output_list)
}
)
closeAllConnections()
rm(list = ls())
