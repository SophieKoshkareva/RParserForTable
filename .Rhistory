sex <- setColumnIndex(sex, 2)
setKey(sex, c("male", "m"), add = TRUE)
setKey(sex, list(c("male", "m")), add = TRUE)
setKey(sex, list(c("male", "m"), c("female", "f")), add = TRUE)
setKey(diabetes, list(c("2 тип", "2тип", "второй", "2"))), add = TRUE)
setKey(diabetes, list(c("2 тип", "2тип", "второй", "2")), add = TRUE)
diabetes
diabetes@key[1]
diabetes@key[[1]]
diabetes@key[[1]][1]
diabetes@key[[1]][2]
sex@key[[1]]
sex@key[[1]][1]
Diabetes <- setClass("Diabetes",
contains = "Column")
setMethod(f = "initialize",
signature = "Diabetes",
definition = function(.Object)
{
.Object@key["DiabetesType"] <- list("1 тип",
"1тип",
"первый")
.Object@value["DiabetesType"] <- list(1)
.Object@key["NoDiabetes"] <- list("нет")
.Object@value["NoDiabetes"] <- list(0)
return(.Object)
}
)
setGeneric(name = "FindErrors",
def = function(theObject)
{
standardGeneric("FindErrors")
}
)
setMethod(f = "FindErrors",
signature = "Diabetes",
definition = function(theObject)
{
#FindMisprints(file@table_in, theObject@column_index, theObject@key, theObject@value)
FindMisprints(misprint, file@table_in, theObject@column_index, theObject@key, theObject@value, file@row_header, file@row_table_legend)
}
)
diabetes <- new("Diabetes")
diabetes <- setColumnIndex(diabetes, 5)
Diabetes <- setClass("Diabetes",
contains = "Column")
setMethod(f = "initialize",
signature = "Diabetes",
definition = function(.Object)
{
.Object@key[["DiabetesType"]] <- list("1 тип",
"1тип",
"первый")
.Object@value[["DiabetesType"]] <- list(1)
.Object@key[["NoDiabetes"]] <- list("нет")
.Object@value[["NoDiabetes"]] <- list(0)
return(.Object)
}
)
setGeneric(name = "FindErrors",
def = function(theObject)
{
standardGeneric("FindErrors")
}
)
setMethod(f = "FindErrors",
signature = "Diabetes",
definition = function(theObject)
{
#FindMisprints(file@table_in, theObject@column_index, theObject@key, theObject@value)
FindMisprints(misprint, file@table_in, theObject@column_index, theObject@key, theObject@value, file@row_header, file@row_table_legend)
}
)
diabetes <- new("Diabetes")
diabetes <- setColumnIndex(diabetes, 5)
setKey(diabetes, list(c("2 тип", "2тип", "второй", "2")), add = TRUE)
setKey(sex, c("female", "f")), add = TRUE)
setKey(sex, c("female", "f"), add = TRUE)
setKey(sex, list(c("female", "f")), add = TRUE)
Sex <- setClass("Sex",
contains = "Binary"
)
setMethod(f = "initialize",
signature = "Sex",
definition = function(.Object)
{
.Object@key[["One"]] <- list("?", "???",
"???????",
"???????",
"?????")
.Object@value[["One"]] <- list(1)
.Object@key[["Zero"]] <- list("?",
"???",
"???????",
"???????")
.Object@value[["Zero"]] <- list(0)
return(.Object)
}
)
setGeneric(name = "FindErrors",
def = function(theObject)
{
standardGeneric("FindErrors")
}
)
setMethod(f = "FindErrors",
signature = "Sex",
definition = function(theObject)
{
#FindMisprints(file@table_in, theObject@column_index, theObject@key, theObject@value)
FindMisprints(misprint, file@table_in, theObject@column_index, theObject@key, theObject@value, file@row_header, file@row_table_legend)
}
)
sex <- new("Sex")
sex <- setColumnIndex(sex, 2)
sex
Sex <- setClass("Sex",
contains = "Binary"
)
setMethod(f = "initialize",
signature = "Sex",
definition = function(.Object)
{
.Object@key[["Male"]] <- list("?", "???",
"???????",
"???????",
"?????")
.Object@value[["Male"]] <- list(1)
.Object@key[["Female"]] <- list("?",
"???",
"???????",
"???????")
.Object@value[["Female"]] <- list(0)
return(.Object)
}
)
setGeneric(name = "FindErrors",
def = function(theObject)
{
standardGeneric("FindErrors")
}
)
setMethod(f = "FindErrors",
signature = "Sex",
definition = function(theObject)
{
#FindMisprints(file@table_in, theObject@column_index, theObject@key, theObject@value)
FindMisprints(misprint, file@table_in, theObject@column_index, theObject@key, theObject@value, file@row_header, file@row_table_legend)
}
)
sex <- new("Sex")
sex <- setColumnIndex(sex, 2)
sex
Sex <- setClass("Sex",
contains = "Binary"
)
setMethod(f = "initialize",
signature = "Sex",
definition = function(.Object)
{
.Object@key[["One"]] <- list("?", "???",
"???????",
"???????",
"?????")
#.Object@value[["Male"]] <- list(1)
.Object@key[["Zero"]] <- list("?",
"???",
"???????",
"???????")
#.Object@value[["Female"]] <- list(0)
return(.Object)
}
)
setGeneric(name = "FindErrors",
def = function(theObject)
{
standardGeneric("FindErrors")
}
)
setMethod(f = "FindErrors",
signature = "Sex",
definition = function(theObject)
{
#FindMisprints(file@table_in, theObject@column_index, theObject@key, theObject@value)
FindMisprints(misprint, file@table_in, theObject@column_index, theObject@key, theObject@value, file@row_header, file@row_table_legend)
}
)
TiaAdcc <- setClass("Binary",
contains = "Column"
)
setMethod(f = "initialize",
signature = "Binary",
definition = function(.Object)
{
.Object@value[["Zero"]] <- list(0)
.Object@value[["One"]]<- list(1)
return(.Object)
}
)
setGeneric(name = "FindErrors",
def = function(theObject)
{
standardGeneric("FindErrors")
}
)
setMethod(f = "FindErrors",
signature = "Binary",
definition = function(theObject)
{
FindMisprints(misprint, file@table_in, theObject@column_index, theObject@key, theObject@value, file@row_header, file@row_table_legend)
}
)
sex <- new("Sex")
sex <- setColumnIndex(sex, 2)
sex
TiaAdcc <- setClass("Binary",
contains = "Column",
prototype = c(value[["Zero"]] <- list(0),
value[["One"]]<- list(1))
)
# setMethod(f = "initialize",
#           signature = "Binary",
#           definition = function(.Object)
#           {
#
#             .Object@value[["Zero"]] <- list(0)
#             .Object@value[["One"]]<- list(1)
#             return(.Object)
#           }
# )
setGeneric(name = "FindErrors",
def = function(theObject)
{
standardGeneric("FindErrors")
}
)
setMethod(f = "FindErrors",
signature = "Binary",
definition = function(theObject)
{
FindMisprints(misprint, file@table_in, theObject@column_index, theObject@key, theObject@value, file@row_header, file@row_table_legend)
}
)
bin <- new("Binary")
bin
sex <- new("Sex")
sex <- setColumnIndex(sex, 2)
sex
source("D:/Diploma/r_project/Column.R")
source("D:/Diploma/r_project/Binary.R")
source("D:/Diploma/r_project/Sex.R")
Column <- setClass("Column",
slots = c(
key = "list",
value = "list",
column_index = "numeric")
)
setGeneric(name = "getColumnIndex",
def = function(theObject)
{
standardGeneric("getColumnIndex")
}
)
setMethod(f = "getColumnIndex",
signature = "Column",
definition = function(theObject)
{
return(theObject@column_index)
}
)
setGeneric(name = "setColumnIndex",
def = function(theObject, index_value)
{
standardGeneric("setColumnIndex")
}
)
setMethod(f = "setColumnIndex",
signature = "Column",
definition = function(theObject, index_value)
{
theObject@column_index <- index_value
return(theObject)
}
)
setGeneric(name = "getValue",
def = function(theObject)
{
standardGeneric("getValue")
}
)
setMethod(f = "getValue",
signature = "Column",
definition = function(theObject)
{
return(theObject@value)
}
)
setGeneric(name = "setValue",
def = function(theObject, newValue, add = FALSE)
{
standardGeneric("setValue")
}
)
setMethod(f = "setValue",
signature = "Column",
definition = function(theObject, newValue, add = FALSE)
{
if(add)
{
theObject@value <- c(theObject@value, newValue)
}else
{
theObject@value <- as.list(newValue)
}
return(theObject)
}
)
setGeneric(name = "getKey",
def = function(theObject)
{
standardGeneric("getKey")
}
)
setMethod(f = "getKey",
signature = "Column",
definition = function(theObject)
{
return(theObject@key)
}
)
setGeneric(name = "setKey",
def = function(theObject, newKey, add = FALSE)
{
standardGeneric("setKey")
}
)
setMethod(f = "setKey",
signature = "Column",
definition = function(theObject, newKey, add = FALSE)
{
if (!is.list(newKey)) newKey <- list(newKey)
for(i in 1:length(newKey))
{
if(add)
{
theObject@key[[i]] <- c(theObject@key[[i]], as.list(newKey[[i]]))
}else
{
theObject@key[[i]] <- as.list(newKey[i])
}
}
return(theObject)
}
)
#setKey(sex, list(c("male", "m"), c("female", "f")), add = TRUE)
#setKey(diabetes, list(c("2 ???", "2???", "??????", "2")), add = TRUE)
TiaAdcc <- setClass("Binary",
contains = "Column",
prototype = c(value[["Zero"]] <- list(0),
value[["One"]]<- list(1))
)
setMethod(f = "initialize",
signature = "Binary",
definition = function(.Object)
{
.Object@value[["Zero"]] <- list(0)
.Object@value[["One"]]<- list(1)
return(.Object)
}
)
setGeneric(name = "FindErrors",
def = function(theObject)
{
standardGeneric("FindErrors")
}
)
setMethod(f = "FindErrors",
signature = "Binary",
definition = function(theObject)
{
FindMisprints(misprint, file@table_in, theObject@column_index, theObject@key, theObject@value, file@row_header, file@row_table_legend)
}
)
bin <- new("Binary")
bin
TiaAdcc <- setClass("Binary",
contains = "Column",
prototype = c(value[["Zero"]] <- list(0),
value[["One"]]<- list(1))
)
# setMethod(f = "initialize",
#           signature = "Binary",
#           definition = function(.Object)
#           {
#
#             .Object@value[["Zero"]] <- list(0)
#             .Object@value[["One"]]<- list(1)
#             return(.Object)
#           }
# )
setGeneric(name = "FindErrors",
def = function(theObject)
{
standardGeneric("FindErrors")
}
)
setMethod(f = "FindErrors",
signature = "Binary",
definition = function(theObject)
{
FindMisprints(misprint, file@table_in, theObject@column_index, theObject@key, theObject@value, file@row_header, file@row_table_legend)
}
)
bin <- new("Binary")
bin
source("D:/Diploma/r_project/Binary.R")
source("D:/Diploma/r_project/Sex.R")
source("D:/Diploma/r_project/Column.R")
source("D:/Diploma/r_project/Binary.R")
TiaAdcc <- setClass("Binary",
contains = "Column"
)
setMethod(f = "initialize",
signature = "Binary",
definition = function(.Object)
{
.Object@value[["Zero"]] <- list(0)
.Object@value[["One"]]<- list(1)
return(.Object)
}
)
setGeneric(name = "FindErrors",
def = function(theObject)
{
standardGeneric("FindErrors")
}
)
setMethod(f = "FindErrors",
signature = "Binary",
definition = function(theObject)
{
FindMisprints(misprint, file@table_in, theObject@column_index, theObject@key, theObject@value, file@row_header, file@row_table_legend)
}
)
Sex <- setClass("Sex",
contains = "Binary"
)
setMethod(f = "initialize",
signature = "Sex",
definition = function(.Object)
{
.Object@key[["One"]] <- list("?", "???",
"???????",
"???????",
"?????")
.Object@value[["Male"]] <- list(1)
.Object@key[["Zero"]] <- list("?",
"???",
"???????",
"???????")
.Object@value[["Female"]] <- list(0)
return(.Object)
}
)
setGeneric(name = "FindErrors",
def = function(theObject)
{
standardGeneric("FindErrors")
}
)
setMethod(f = "FindErrors",
signature = "Sex",
definition = function(theObject)
{
#FindMisprints(file@table_in, theObject@column_index, theObject@key, theObject@value)
FindMisprints(misprint, file@table_in, theObject@column_index, theObject@key, theObject@value, file@row_header, file@row_table_legend)
}
)
source("D:/Diploma/r_project/Binary.R")
source("D:/Diploma/r_project/Sex.R")
sex <- new("Sex")
sex <- setColumnIndex(sex, 2)
sex
Diabetes <- setClass("Diabetes",
contains = "Binary")
setMethod(f = "initialize",
signature = "Diabetes",
definition = function(.Object)
{
.Object@key[["DiabetesType"]] <- list("1 ???",
"1???",
"??????")
.Object@value[["DiabetesType"]] <- list(1)
.Object@key[["NoDiabetes"]] <- list("???")
.Object@value[["NoDiabetes"]] <- list(0)
return(.Object)
}
)
setGeneric(name = "FindErrors",
def = function(theObject)
{
standardGeneric("FindErrors")
}
)
setMethod(f = "FindErrors",
signature = "Diabetes",
definition = function(theObject)
{
#FindMisprints(file@table_in, theObject@column_index, theObject@key, theObject@value)
FindMisprints(misprint, file@table_in, theObject@column_index, theObject@key, theObject@value, file@row_header, file@row_table_legend)
}
)
