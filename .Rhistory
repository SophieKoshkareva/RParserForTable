}
)
setMethod(f = "SaveExcelWB",
signature = "FileOut",
definition = function(theObject)
{
autoSizeColumn(theObject@sheet, colIndex = c(1:ncol(theObject@table_out)))
#!!!!!
createFreezePane(theObject@sheet, rowSplit = 2, colSplit = 1, startRow = 1, startColumn = 1)
saveWorkbook(theObject@wb, theObject@path)
print("New workbook was created")
return(theObject)
}
)
source("D:/Diploma/r_project/FileOut.R")
require(xlsx)
FileOut <- setClass("FileOut",
slots = c(table_out = "data.frame",
sheet_name = "character",
wb = "jobjRef",
sheet = "jobjRef"),
#prototype = prototype(list(table_out = FileIn@table_in)),
contains = "File"
)
setMethod(f = "initialize",
signature = "FileOut",
definition = function(.Object)
{
.Object@table_out <- FileIn@table_in
return(.Object)
}
)
setGeneric(name = "getExcelSheetName",
def = function(theObject)
{
standardGeneric("getExcelSheetName")
}
)
setMethod(f = "getExcelSheetName",
signature = "FileOut",
definition = function(theObject)
{
return(theObject@sheet_name)
}
)
setGeneric(name = "setExcelSheetName",
def = function(theObject, new_sheet_name)
{
standardGeneric("setExcelSheetName")
}
)
setMethod(f = "setExcelSheetName",
signature = "FileOut",
definition = function(theObject, new_sheet_name)
{
theObject@sheet_name <- new_sheet_name
return(theObject)
}
)
setGeneric(name = "CreateExcelWB",
def = function(theObject)
{
standardGeneric("CreateExcelWB")
}
)
setMethod(f = "CreateExcelWB",
signature = "FileOut",
definition = function(theObject)
{
theObject@wb <- createWorkbook(type = "xlsx")
theObject@sheet <- createSheet(theObject@wb, theObject@sheet_name)
createRow(theObject@sheet, rowIndex = 1)
TABLE_COLNAMES_STYLE <- CellStyle(theObject@wb) +
Font(theObject@wb, isBold = TRUE) +
Alignment(wrapText = TRUE, horizontal = "ALIGN_CENTER") +
Border(position = c("BOTTOM", "LEFT", "TOP", "RIGHT"))
addDataFrame(theObject@table_out,
theObject@sheet,
row.names = FALSE,
startRow = 2,
startColumn = 1,
colnamesStyle = TABLE_COLNAMES_STYLE)
return(theObject)
}
)
setGeneric(name = "SaveExcelWB",
def = function(theObject)
{
standardGeneric("SaveExcelWB")
}
)
setMethod(f = "SaveExcelWB",
signature = "FileOut",
definition = function(theObject)
{
autoSizeColumn(theObject@sheet, colIndex = c(1:ncol(theObject@table_out)))
#!!!!!
createFreezePane(theObject@sheet, rowSplit = 2, colSplit = 1, startRow = 1, startColumn = 1)
saveWorkbook(theObject@wb, theObject@path)
print("New workbook was created")
return(theObject)
}
)
source("D:/Diploma/r_project/FileOut.R")
file_out <- new("FileOut")
require(xlsx)
FileOut <- setClass("FileOut",
slots = c(table_out = "data.frame",
sheet_name = "character",
wb = "jobjRef",
sheet = "jobjRef"),
#prototype = prototype(list(table_out = FileIn@table_in)),
contains = "File"
)
setGeneric(name = "setTableOut",
def = function(theObject, myfile)
{
standardGeneric("setTableOut")
}
)
setMethod(f = "setTableOut",
signature = "FileOut",
definition = function(theObject, myfile)
{
theObject@table_out <- myfile@table_in
return(theObject)
}
)
setGeneric(name = "getExcelSheetName",
def = function(theObject)
{
standardGeneric("getExcelSheetName")
}
)
setMethod(f = "getExcelSheetName",
signature = "FileOut",
definition = function(theObject)
{
return(theObject@sheet_name)
}
)
setGeneric(name = "setExcelSheetName",
def = function(theObject, new_sheet_name)
{
standardGeneric("setExcelSheetName")
}
)
setMethod(f = "setExcelSheetName",
signature = "FileOut",
definition = function(theObject, new_sheet_name)
{
theObject@sheet_name <- new_sheet_name
return(theObject)
}
)
setGeneric(name = "CreateExcelWB",
def = function(theObject)
{
standardGeneric("CreateExcelWB")
}
)
setMethod(f = "CreateExcelWB",
signature = "FileOut",
definition = function(theObject)
{
theObject@wb <- createWorkbook(type = "xlsx")
theObject@sheet <- createSheet(theObject@wb, theObject@sheet_name)
createRow(theObject@sheet, rowIndex = 1)
TABLE_COLNAMES_STYLE <- CellStyle(theObject@wb) +
Font(theObject@wb, isBold = TRUE) +
Alignment(wrapText = TRUE, horizontal = "ALIGN_CENTER") +
Border(position = c("BOTTOM", "LEFT", "TOP", "RIGHT"))
addDataFrame(theObject@table_out,
theObject@sheet,
row.names = FALSE,
startRow = 2,
startColumn = 1,
colnamesStyle = TABLE_COLNAMES_STYLE)
return(theObject)
}
)
setGeneric(name = "SaveExcelWB",
def = function(theObject)
{
standardGeneric("SaveExcelWB")
}
)
setMethod(f = "SaveExcelWB",
signature = "FileOut",
definition = function(theObject)
{
autoSizeColumn(theObject@sheet, colIndex = c(1:ncol(theObject@table_out)))
#!!!!!
createFreezePane(theObject@sheet, rowSplit = 2, colSplit = 1, startRow = 1, startColumn = 1)
saveWorkbook(theObject@wb, theObject@path)
print("New workbook was created")
return(theObject)
}
)
rm(list = ls())
on.exit()
Sys.setenv(TZ = "Asia/Novosibirsk")
setOldClass("file")
source("D:/Diploma/r_project/File1.R")
source("D:/Diploma/r_project/FileIn.R")
file_in <- new("FileIn")
file_in <- setFilePath(file_in, "D:/Diploma/r_project/data_GABR_PCI ред1..csv")
file_in <- ReadFileIn(file_in)
source("D:/Diploma/r_project/FileOut.R")
file_out <- new("FileOut")
file_out <- setFilePath(file_out, "D:/Diploma/r_project/data_CABG_PCI_2_coloring.xlsx")
file_out <- setExcelSheetName(file_out, "data_CABG_PCI_2")
source("D:/Diploma/r_project/FileOut.R")
file_out <- new("FileOut")
require(xlsx)
FileOut <- setClass("FileOut",
slots = c(table_out = "data.frame",
sheet_name = "character",
wb = "jobjRef",
sheet = "jobjRef"),
#prototype = prototype(list(table_out = FileIn@table_in)),
contains = "File"
)
setGeneric(name = "setTableOut",
def = function(theObject, myfile)
{
standardGeneric("setTableOut")
}
)
setMethod(f = "setTableOut",
signature = "FileOut",
definition = function(theObject, myfile)
{
theObject@table_out <- myfile@table_in
return(theObject)
}
)
setGeneric(name = "getExcelSheetName",
def = function(theObject)
{
standardGeneric("getExcelSheetName")
}
)
setMethod(f = "getExcelSheetName",
signature = "FileOut",
definition = function(theObject)
{
return(theObject@sheet_name)
}
)
setGeneric(name = "setExcelSheetName",
def = function(theObject, new_sheet_name)
{
standardGeneric("setExcelSheetName")
}
)
setMethod(f = "setExcelSheetName",
signature = "FileOut",
definition = function(theObject, new_sheet_name)
{
theObject@sheet_name <- new_sheet_name
return(theObject)
}
)
setGeneric(name = "CreateExcelWB",
def = function(theObject)
{
standardGeneric("CreateExcelWB")
}
)
setMethod(f = "CreateExcelWB",
signature = "FileOut",
definition = function(theObject)
{
theObject@wb <- createWorkbook(type = "xlsx")
theObject@sheet <- createSheet(theObject@wb, theObject@sheet_name)
createRow(theObject@sheet, rowIndex = 1)
TABLE_COLNAMES_STYLE <- CellStyle(theObject@wb) +
Font(theObject@wb, isBold = TRUE) +
Alignment(wrapText = TRUE, horizontal = "ALIGN_CENTER") +
Border(position = c("BOTTOM", "LEFT", "TOP", "RIGHT"))
addDataFrame(theObject@table_out,
theObject@sheet,
row.names = FALSE,
startRow = 2,
startColumn = 1,
colnamesStyle = TABLE_COLNAMES_STYLE)
return(theObject)
}
)
setGeneric(name = "SaveExcelWB",
def = function(theObject)
{
standardGeneric("SaveExcelWB")
}
)
setMethod(f = "SaveExcelWB",
signature = "FileOut",
definition = function(theObject)
{
autoSizeColumn(theObject@sheet, colIndex = c(1:ncol(theObject@table_out)))
#!!!!!
createFreezePane(theObject@sheet, rowSplit = 2, colSplit = 1, startRow = 1, startColumn = 1)
saveWorkbook(theObject@wb, theObject@path)
print("New workbook was created")
return(theObject)
}
)
file_out <- new("FileOut")
source("D:/Diploma/r_project/FileOut.R")
file_out <- new("FileOut")
require(xlsx)
FileOut <- setClass("FileOut",
slots = c(table_out = "data.frame",
sheet_name = "character",
wb = "jobjRef",
sheet = "jobjRef"),
#prototype = prototype(list(table_out = FileIn@table_in)),
contains = "File"
)
setGeneric(name = "setTableOut",
def = function(theObject, myfile)
{
standardGeneric("setTableOut")
}
)
setMethod(f = "setTableOut",
signature = "FileOut",
definition = function(theObject, myfile)
{
theObject@table_out <- myfile@table_in
return(theObject)
}
)
setGeneric(name = "getExcelSheetName",
def = function(theObject)
{
standardGeneric("getExcelSheetName")
}
)
setMethod(f = "getExcelSheetName",
signature = "FileOut",
definition = function(theObject)
{
return(theObject@sheet_name)
}
)
setGeneric(name = "setExcelSheetName",
def = function(theObject, new_sheet_name)
{
standardGeneric("setExcelSheetName")
}
)
setMethod(f = "setExcelSheetName",
signature = "FileOut",
definition = function(theObject, new_sheet_name)
{
theObject@sheet_name <- new_sheet_name
return(theObject)
}
)
setGeneric(name = "CreateExcelWB",
def = function(theObject)
{
standardGeneric("CreateExcelWB")
}
)
setMethod(f = "CreateExcelWB",
signature = "FileOut",
definition = function(theObject)
{
theObject@wb <- createWorkbook(type = "xlsx")
theObject@sheet <- createSheet(theObject@wb, theObject@sheet_name)
createRow(theObject@sheet, rowIndex = 1)
TABLE_COLNAMES_STYLE <- CellStyle(theObject@wb) +
Font(theObject@wb, isBold = TRUE) +
Alignment(wrapText = TRUE, horizontal = "ALIGN_CENTER") +
Border(position = c("BOTTOM", "LEFT", "TOP", "RIGHT"))
addDataFrame(theObject@table_out,
theObject@sheet,
row.names = FALSE,
startRow = 2,
startColumn = 1,
colnamesStyle = TABLE_COLNAMES_STYLE)
return(theObject)
}
)
setGeneric(name = "SaveExcelWB",
def = function(theObject)
{
standardGeneric("SaveExcelWB")
}
)
setMethod(f = "SaveExcelWB",
signature = "FileOut",
definition = function(theObject)
{
autoSizeColumn(theObject@sheet, colIndex = c(1:ncol(theObject@table_out)))
#!!!!!
createFreezePane(theObject@sheet, rowSplit = 2, colSplit = 1, startRow = 1, startColumn = 1)
saveWorkbook(theObject@wb, theObject@path)
print("New workbook was created")
return(theObject)
}
)
on.exit()
Sys.setenv(TZ = "Asia/Novosibirsk")
setOldClass("file")
source("D:/Diploma/r_project/File1.R")
source("D:/Diploma/r_project/FileIn.R")
file_in <- new("FileIn")
file_in <- setFilePath(file_in, "D:/Diploma/r_project/data_GABR_PCI ред1..csv")
file_in <- ReadFileIn(file_in)
source("D:/Diploma/r_project/FileOut.R")
file_out <- new("FileOut")
file_out <- new("FileOut")
require(xlsx)
FileOut <- setClass("FileOut",
slots = c(table_out = "data.frame",
sheet_name = "character",
wb = "jobjRef",
sheet = "jobjRef"),
contains = "File"
)
setGeneric(name = "setTableOut",
def = function(theObject, myfile)
{
standardGeneric("setTableOut")
}
)
setMethod(f = "setTableOut",
signature = "FileOut",
definition = function(theObject, myfile)
{
theObject@table_out <- myfile@table_in
return(theObject)
}
)
setGeneric(name = "getExcelSheetName",
def = function(theObject)
{
standardGeneric("getExcelSheetName")
}
)
setMethod(f = "getExcelSheetName",
signature = "FileOut",
definition = function(theObject)
{
return(theObject@sheet_name)
}
)
setGeneric(name = "setExcelSheetName",
def = function(theObject, new_sheet_name)
{
standardGeneric("setExcelSheetName")
}
)
setMethod(f = "setExcelSheetName",
signature = "FileOut",
definition = function(theObject, new_sheet_name)
{
theObject@sheet_name <- new_sheet_name
return(theObject)
}
)
setGeneric(name = "CreateExcelWB",
def = function(theObject)
{
standardGeneric("CreateExcelWB")
}
)
setMethod(f = "CreateExcelWB",
signature = "FileOut",
definition = function(theObject)
{
theObject@wb <- createWorkbook(type = "xlsx")
theObject@sheet <- createSheet(theObject@wb, theObject@sheet_name)
createRow(theObject@sheet, rowIndex = 1)
TABLE_COLNAMES_STYLE <- CellStyle(theObject@wb) +
Font(theObject@wb, isBold = TRUE) +
Alignment(wrapText = TRUE, horizontal = "ALIGN_CENTER") +
Border(position = c("BOTTOM", "LEFT", "TOP", "RIGHT"))
addDataFrame(theObject@table_out,
theObject@sheet,
row.names = FALSE,
startRow = 2,
startColumn = 1,
colnamesStyle = TABLE_COLNAMES_STYLE)
return(theObject)
}
)
setGeneric(name = "SaveExcelWB",
def = function(theObject)
{
standardGeneric("SaveExcelWB")
}
)
setMethod(f = "SaveExcelWB",
signature = "FileOut",
definition = function(theObject)
{
autoSizeColumn(theObject@sheet, colIndex = c(1:ncol(theObject@table_out)))
#!!!!!
createFreezePane(theObject@sheet, rowSplit = 2, colSplit = 1, startRow = 1, startColumn = 1)
saveWorkbook(theObject@wb, theObject@path)
print("New workbook was created")
return(theObject)
}
)
source("D:/Diploma/r_project/File1.R")
source("D:/Diploma/r_project/FileOut.R")
file_out <- new("FileOut")
