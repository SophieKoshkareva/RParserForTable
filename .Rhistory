contains = "Error"
)
setMethod(f = "initialize",
signature = "Misprint",
definition = function(.Object)
{
.Object@title <- c("Исправления")
.Object@col_index_legend <- 2
.Object@style<- c("misprint")
return(.Object)
}
)
setGeneric(name = "FindMisprints",
def = function(theObject, table_in, column_index, keys, values, row_header, row_table_legend)
{
standardGeneric("FindMisprints")
}
)
setMethod(f = "FindMisprints",
signature = "Misprint",
definition = function(theObject, table_in, column_index, keys, values, row_header, row_table_legend)
{
c <- table_in[[column_index]]
misprints_row_ind <- c()
for (i in 1:length(c))
{
found <- FALSE
if (is.na(c[i]) == TRUE)
{
misprints_row_ind <- i + row_header + row_table_legend
missingValue@indices <<- append(missingValue@indices, values = paste(misprints_row_ind, column_index, sep = "."))
PrintReport(missingValue, file@path_report, misprints_row_ind, column_index)
cat("Missing value coordinates are ", paste(i, column_index, sep = "."), "\n")
next
}
for(j in 1:length(values))
{
if (toupper(c[i]) == toupper(values[[j]][1]))
{
found <- TRUE
break
}
}
if (found)
next
if (!length(keys))
{
misprints_row_ind <- i + row_header + row_table_legend
unsolvedMisprint@indices <<- append(unsolvedMisprint@indices, values = paste(misprints_row_ind, column_index, sep = "."))
PrintReport(unsolvedMisprint, file@path_report, misprints_row_ind, column_index)
cat("Unsolved misprint coordinates are", paste(i, column_index, sep = "."), "\n")
found <- TRUE
} else
{
for(a in 1:length(keys))
{
if (found)
break
for(b in 1:length(keys[[a]]))
{
if (toupper(c[i]) == toupper(keys[[a]][b]))
{
found <- TRUE
misprints_row_ind <- i + row_header + row_table_legend
misprint@indices <<- append(misprint@indices, values = paste(misprints_row_ind, column_index, sep = "."))
PrintReport(theObject, file@path_report, misprints_row_ind, column_index)
cat("Misprints coordinates are ", paste(i, column_index, sep = "."), "\n")
file@table_out[[column_index]][i] <<- unlist(values[[a]], use.names = FALSE)
break
}
}
if ((!found) & (a == length(keys)))
{
misprints_row_ind <- i + row_header + row_table_legend
unsolvedMisprint@indices <<- append(unsolvedMisprint@indices, values = paste(misprints_row_ind, column_index, sep = "."))
PrintReport(unsolvedMisprint, file@path_report, misprints_row_ind, column_index)
cat("Unsolved misprint coordinates are", paste(i, column_index, sep = "."), "\n")
found <- TRUE
}
}
}
if (found)
next
}
#return(theObject)
}
)
setGeneric(name = "FindMisprintsForNumeric",
def = function(theObject, table_in, column_index, row_header, row_table_legend)
{
standardGeneric("FindMisprintsForNumeric")
}
)
setMethod(f = "FindMisprintsForNumeric",
signature = "Misprint",
definition = function(theObject, table_in, column_index, row_header, row_table_legend)
{
misprints_row_ind <- c()
c <- table_in[[column_index]]
for (i in 1:length(c))
{
if (is.na(c[i]) == TRUE)
{
misprints_row_ind <- i + row_header + row_table_legend
missingValue@indices <<- append(missingValue@indices, values = paste(misprints_row_ind, column_index, sep = "."))
PrintReport(missingValue, file@path_report, misprints_row_ind, column_index)
cat("Missing value coordinates are ", paste(i, column_index, sep = "."), "\n")
next
}
if (grepl("^(\\d)+([,.](\\d)+)?$", c[[i]]) == FALSE)
{
misprints_row_ind <- i + row_header + row_table_legend
unsolvedMisprint@indices <<- append(unsolvedMisprint@indices, values = paste(misprints_row_ind, column_index, sep = "."))
PrintReport(unsolvedMisprint, file@path_report, misprints_row_ind, column_index)
cat("Unsolved misprint coordinates are ", paste(i, column_index, sep = "."), "\n")
next
}
}
}
)
source('D:/Diploma/r_project/Misprint.R')
#install.packages("xlsx")
require(xlsx)
source("D:/Diploma/r_project/File.R")
file <- new("File")
file <- Open(file)
# globalMissing <- character()
# globalMisprint <- character()
# globalOutlier <- character()
# globalUnsolvedMisprint <- character()
source("D:/Diploma/r_project/Error.R")
source("D:/Diploma/r_project/MissingValue.R")
missingValue <- new("MissingValue")
source("D:/Diploma/r_project/Misprint.R")
misprint <- new("Misprint")
source("D:/Diploma/r_project/UnsolvedMisprint.R")
unsolvedMisprint <- new("UnsolvedMisprint")
source("D:/Diploma/r_project/Outlier.R")
outlier <- new("Outlier")
#2
source("D:/Diploma/r_project/Column.R")
source("D:/Diploma/r_project/Sex.R")
sex <- new("Sex")
FindErrors(sex)
#3
source("D:/Diploma/r_project/Age.R")
age <- new("Age")
FindErrors(age)
#4
source("D:/Diploma/r_project/Weight.R")
weight <- new("Weight")
FindErrors(weight)
#5
source("D:/Diploma/r_project/Diabetes.R")
diabetes <- new("Diabetes")
FindErrors(diabetes)
#6
source("D:/Diploma/r_project/NyhaClass.R")
nyhaClass <- new("NyhaClass")
FindErrors(nyhaClass)
#12
source("D:/Diploma/r_project/Euroscore.R")
euroscore <- new("Euroscore")
FindErrors(euroscore)
#13
source("D:/Diploma/r_project/StsScore.R")
stsScore <- new("StsScore")
FindErrors(stsScore)
#14
source("D:/Diploma/r_project/PeakPressureGradient.R")
peakPressureGradient <- new("PeakPressureGradient")
FindErrors(peakPressureGradient)
#15
source("D:/Diploma/r_project/AveragePressureGradient.R")
averagePressureGradient <- new("AveragePressureGradient")
FindErrors(averagePressureGradient)
#16
source("D:/Diploma/r_project/AorticValveStenosis.R")
aorticValveStenosis <- new("AorticValveStenosis")
FindErrors(aorticValveStenosis)
#19
source("D:/Diploma/r_project/EjectionFraction.R")
ejectionFraction <- new("EjectionFraction")
FindErrors(ejectionFraction)
#26
source("D:/Diploma/r_project/ArtificialCirculationTime.R")
artificialCirculationTime <- new("ArtificialCirculationTime")
FindErrors(artificialCirculationTime)
#27
source("D:/Diploma/r_project/PeakPressureGradientRepeat.R")
peakPressureGradientRepeat <- new("PeakPressureGradientRepeat")
FindErrors(peakPressureGradientRepeat)
#28
source("D:/Diploma/r_project/AveragePressureGradientRepeat.R")
averagePressureGradientRepeat <- new("AveragePressureGradientRepeat")
FindErrors(averagePressureGradientRepeat)
#other columns
file <- CreateExcelWB(file)
#missingValue@indices <- globalMissing
SetColor(missingValue, file)
#misprint@indices <- globalMisprint
SetColor(misprint, file)
#unsolvedMisprint@indices <- globalUnsolvedMisprint
SetColor(unsolvedMisprint, file)
#outlier@indices <- globalOutlier
SetColor(outlier, file)
file <- SaveExcelWB(file)
Misprint <- setClass("Misprint",
contains = "Error"
)
setMethod(f = "initialize",
signature = "Misprint",
definition = function(.Object)
{
.Object@title <- c("Исправления")
.Object@col_index_legend <- 2
.Object@style<- c("misprint")
return(.Object)
}
)
setGeneric(name = "FindMisprints",
def = function(theObject, table_in, column_index, keys, values, row_header, row_table_legend)
{
standardGeneric("FindMisprints")
}
)
setMethod(f = "FindMisprints",
signature = "Misprint",
definition = function(theObject, table_in, column_index, keys, values, row_header, row_table_legend)
{
c <- table_in[[column_index]]
misprints_row_ind <- c()
for (i in 1:length(c))
{
found <- FALSE
if (is.na(c[i]) == TRUE)
{
misprints_row_ind <- i + row_header + row_table_legend
missingValue@indices <<- append(missingValue@indices, values = paste(misprints_row_ind, column_index, sep = "."))
PrintReport(missingValue, file@path_report, misprints_row_ind, column_index)
cat("Missing value coordinates are ", paste(i, column_index, sep = "."), "\n")
next
}
for(j in 1:length(values))
{
if (toupper(c[i]) == toupper(values[[j]][1]))
{
found <- TRUE
break
}
}
if (found)
next
if (length(keys) == 0)
{
misprints_row_ind <- i + row_header + row_table_legend
unsolvedMisprint@indices <<- append(unsolvedMisprint@indices, values = paste(misprints_row_ind, column_index, sep = "."))
PrintReport(unsolvedMisprint, file@path_report, misprints_row_ind, column_index)
cat("Unsolved misprint coordinates are", paste(i, column_index, sep = "."), "\n")
found <- TRUE
} else
{
for(a in 1:length(keys))
{
if (found)
break
for(b in 1:length(keys[[a]]))
{
if (toupper(c[i]) == toupper(keys[[a]][b]))
{
found <- TRUE
misprints_row_ind <- i + row_header + row_table_legend
misprint@indices <<- append(misprint@indices, values = paste(misprints_row_ind, column_index, sep = "."))
PrintReport(theObject, file@path_report, misprints_row_ind, column_index)
cat("Misprints coordinates are ", paste(i, column_index, sep = "."), "\n")
file@table_out[[column_index]][i] <<- unlist(values[[a]], use.names = FALSE)
break
}
}
if ((!found) & (a == length(keys)))
{
misprints_row_ind <- i + row_header + row_table_legend
unsolvedMisprint@indices <<- append(unsolvedMisprint@indices, values = paste(misprints_row_ind, column_index, sep = "."))
PrintReport(unsolvedMisprint, file@path_report, misprints_row_ind, column_index)
cat("Unsolved misprint coordinates are", paste(i, column_index, sep = "."), "\n")
found <- TRUE
}
}
}
if (found)
next
}
#return(theObject)
}
)
setGeneric(name = "FindMisprintsForNumeric",
def = function(theObject, table_in, column_index, row_header, row_table_legend)
{
standardGeneric("FindMisprintsForNumeric")
}
)
setMethod(f = "FindMisprintsForNumeric",
signature = "Misprint",
definition = function(theObject, table_in, column_index, row_header, row_table_legend)
{
misprints_row_ind <- c()
c <- table_in[[column_index]]
for (i in 1:length(c))
{
if (is.na(c[i]) == TRUE)
{
misprints_row_ind <- i + row_header + row_table_legend
missingValue@indices <<- append(missingValue@indices, values = paste(misprints_row_ind, column_index, sep = "."))
PrintReport(missingValue, file@path_report, misprints_row_ind, column_index)
cat("Missing value coordinates are ", paste(i, column_index, sep = "."), "\n")
next
}
if (grepl("^(\\d)+([,.](\\d)+)?$", c[[i]]) == FALSE)
{
misprints_row_ind <- i + row_header + row_table_legend
unsolvedMisprint@indices <<- append(unsolvedMisprint@indices, values = paste(misprints_row_ind, column_index, sep = "."))
PrintReport(unsolvedMisprint, file@path_report, misprints_row_ind, column_index)
cat("Unsolved misprint coordinates are ", paste(i, column_index, sep = "."), "\n")
next
}
}
}
)
#install.packages("xlsx")
require(xlsx)
source("D:/Diploma/r_project/File.R")
file <- new("File")
file <- Open(file)
# globalMissing <- character()
# globalMisprint <- character()
# globalOutlier <- character()
# globalUnsolvedMisprint <- character()
source("D:/Diploma/r_project/Error.R")
source("D:/Diploma/r_project/MissingValue.R")
missingValue <- new("MissingValue")
source("D:/Diploma/r_project/Misprint.R")
misprint <- new("Misprint")
source("D:/Diploma/r_project/UnsolvedMisprint.R")
unsolvedMisprint <- new("UnsolvedMisprint")
source("D:/Diploma/r_project/Outlier.R")
outlier <- new("Outlier")
#2
source("D:/Diploma/r_project/Column.R")
source("D:/Diploma/r_project/Sex.R")
sex <- new("Sex")
FindErrors(sex)
#3
source("D:/Diploma/r_project/Age.R")
age <- new("Age")
FindErrors(age)
#4
source("D:/Diploma/r_project/Weight.R")
weight <- new("Weight")
FindErrors(weight)
#5
source("D:/Diploma/r_project/Diabetes.R")
diabetes <- new("Diabetes")
FindErrors(diabetes)
#6
source("D:/Diploma/r_project/NyhaClass.R")
nyhaClass <- new("NyhaClass")
FindErrors(nyhaClass)
#12
source("D:/Diploma/r_project/Euroscore.R")
euroscore <- new("Euroscore")
FindErrors(euroscore)
#13
source("D:/Diploma/r_project/StsScore.R")
stsScore <- new("StsScore")
FindErrors(stsScore)
#14
source("D:/Diploma/r_project/PeakPressureGradient.R")
peakPressureGradient <- new("PeakPressureGradient")
FindErrors(peakPressureGradient)
#15
source("D:/Diploma/r_project/AveragePressureGradient.R")
averagePressureGradient <- new("AveragePressureGradient")
FindErrors(averagePressureGradient)
#16
source("D:/Diploma/r_project/AorticValveStenosis.R")
aorticValveStenosis <- new("AorticValveStenosis")
FindErrors(aorticValveStenosis)
#19
source("D:/Diploma/r_project/EjectionFraction.R")
ejectionFraction <- new("EjectionFraction")
FindErrors(ejectionFraction)
#26
source("D:/Diploma/r_project/ArtificialCirculationTime.R")
artificialCirculationTime <- new("ArtificialCirculationTime")
FindErrors(artificialCirculationTime)
#27
source("D:/Diploma/r_project/PeakPressureGradientRepeat.R")
peakPressureGradientRepeat <- new("PeakPressureGradientRepeat")
FindErrors(peakPressureGradientRepeat)
#28
source("D:/Diploma/r_project/AveragePressureGradientRepeat.R")
averagePressureGradientRepeat <- new("AveragePressureGradientRepeat")
FindErrors(averagePressureGradientRepeat)
#other columns
file <- CreateExcelWB(file)
#missingValue@indices <- globalMissing
SetColor(missingValue, file)
#misprint@indices <- globalMisprint
SetColor(misprint, file)
#unsolvedMisprint@indices <- globalUnsolvedMisprint
SetColor(unsolvedMisprint, file)
#outlier@indices <- globalOutlier
SetColor(outlier, file)
file <- SaveExcelWB(file)
nyhaClass@key
length(nyhaClass@key)==0
source('D:/Diploma/r_project/Misprint.R')
#install.packages("xlsx")
require(xlsx)
source("D:/Diploma/r_project/File.R")
file <- new("File")
file <- Open(file)
# globalMissing <- character()
# globalMisprint <- character()
# globalOutlier <- character()
# globalUnsolvedMisprint <- character()
source("D:/Diploma/r_project/Error.R")
source("D:/Diploma/r_project/MissingValue.R")
missingValue <- new("MissingValue")
source("D:/Diploma/r_project/Misprint.R")
misprint <- new("Misprint")
source("D:/Diploma/r_project/UnsolvedMisprint.R")
unsolvedMisprint <- new("UnsolvedMisprint")
source("D:/Diploma/r_project/Outlier.R")
outlier <- new("Outlier")
#2
source("D:/Diploma/r_project/Column.R")
source("D:/Diploma/r_project/Sex.R")
sex <- new("Sex")
FindErrors(sex)
#3
source("D:/Diploma/r_project/Age.R")
age <- new("Age")
FindErrors(age)
#4
source("D:/Diploma/r_project/Weight.R")
weight <- new("Weight")
FindErrors(weight)
#5
source("D:/Diploma/r_project/Diabetes.R")
diabetes <- new("Diabetes")
FindErrors(diabetes)
#6
source("D:/Diploma/r_project/NyhaClass.R")
nyhaClass <- new("NyhaClass")
FindErrors(nyhaClass)
#12
source("D:/Diploma/r_project/Euroscore.R")
euroscore <- new("Euroscore")
FindErrors(euroscore)
#13
source("D:/Diploma/r_project/StsScore.R")
stsScore <- new("StsScore")
FindErrors(stsScore)
#14
source("D:/Diploma/r_project/PeakPressureGradient.R")
peakPressureGradient <- new("PeakPressureGradient")
FindErrors(peakPressureGradient)
#15
source("D:/Diploma/r_project/AveragePressureGradient.R")
averagePressureGradient <- new("AveragePressureGradient")
FindErrors(averagePressureGradient)
#16
source("D:/Diploma/r_project/AorticValveStenosis.R")
aorticValveStenosis <- new("AorticValveStenosis")
FindErrors(aorticValveStenosis)
#19
source("D:/Diploma/r_project/EjectionFraction.R")
ejectionFraction <- new("EjectionFraction")
FindErrors(ejectionFraction)
#26
source("D:/Diploma/r_project/ArtificialCirculationTime.R")
artificialCirculationTime <- new("ArtificialCirculationTime")
FindErrors(artificialCirculationTime)
#27
source("D:/Diploma/r_project/PeakPressureGradientRepeat.R")
peakPressureGradientRepeat <- new("PeakPressureGradientRepeat")
FindErrors(peakPressureGradientRepeat)
#28
source("D:/Diploma/r_project/AveragePressureGradientRepeat.R")
averagePressureGradientRepeat <- new("AveragePressureGradientRepeat")
FindErrors(averagePressureGradientRepeat)
#other columns
file <- CreateExcelWB(file)
#missingValue@indices <- globalMissing
SetColor(missingValue, file)
#misprint@indices <- globalMisprint
SetColor(misprint, file)
#unsolvedMisprint@indices <- globalUnsolvedMisprint
SetColor(unsolvedMisprint, file)
#outlier@indices <- globalOutlier
SetColor(outlier, file)
file <- SaveExcelWB(file)
debugSource('D:/Diploma/r_project/Misprint.R')
FindMisprints(misprint, file@table_in, nyhaClass@column_index, nyhaClass@key, nyhaClass@value, file@row_header, file@row_table_legend)
print(c[i])
print(i)
debugSource('D:/Diploma/r_project/Misprint.R')
debugSource('D:/Diploma/r_project/Misprint.R')
debugSource('D:/Diploma/r_project/Misprint.R')
source('D:/Diploma/r_project/Misprint.R')
debugSource('D:/Diploma/r_project/Misprint.R')
